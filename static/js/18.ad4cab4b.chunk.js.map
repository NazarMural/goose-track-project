{"version":3,"file":"static/js/18.ad4cab4b.chunk.js","mappings":"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","sources":["components/MainContainer/MainContainer.styled.jsx","components/MainContainer/MainContainer.jsx","components/Account/UserInfo/UserInfo.styled.jsx","components/Account/UserInfo/UserInfo.jsx","components/Account/UserForm/UserForm.styled.jsx","components/Account/UserForm/UserForm.jsx","pages/AccountPage.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { desktop, min, tablet } from 'styles/media';\n\nexport const Main = styled.main`\n  background-color: var(--page-bg-color);\n  padding-top: 64px;\n  padding-bottom: 40px;\n\n  ${min(tablet)} {\n    padding-bottom: 38px;\n  }\n\n  ${min(desktop)} {\n    padding-top: 38px;\n    padding-bottom: 32px;\n  }\n`;\n\nexport const Container = styled.div`\n  padding: 0 20px;\n\n  ${min(tablet)} {\n    padding: 0 32px;\n  }\n`;\n","import { Container, Main } from './MainContainer.styled';\n\nexport const MainContainer = ({ children }) => {\n  return (\n    <Main>\n      <Container>{children}</Container>\n    </Main>\n  );\n};\n","import styled from '@emotion/styled';\nimport { min, tablet, desktop } from 'styles/media';\n\nexport const UserContainer = styled.div`\n  margin: 0 auto;\n  display: flex;\n  margin-bottom: 40px;\n  max-width: 299px;\n  flex-direction: column;\n  align-items: center;\n\n  ${min(tablet)} {\n    max-width: 704px;\n    margin-bottom: 66px;\n  }\n  ${min(desktop)} {\n    max-width: 1087px;\n    display: flex;\n    margin-bottom: 44px;\n    flex-direction: column;\n    align-items: center;\n  }\n`;\nexport const AvatarWrapper = styled.div`\n  position: relative;\n  width: 72px;\n  height: 72px;\n  border-radius: 50%;\n  margin: -31px 0 18px;\n  border: solid 2px var(--accent-color);\n  overflow: hidden;\n  ${min(tablet)} {\n    margin: 40px 0 20px;\n  }\n  ${min(desktop)} {\n    position: relative;\n    width: 124px;\n    height: 124px;\n    border-radius: 50%;\n    margin: 60px 0 20px;\n    border: solid 2px var(--accent-color);\n  }\n`;\nexport const AddAvatarButton = styled.label`\n  position: absolute;\n  bottom: 16px;\n  right: 14px;\n  width: 14px;\n  height: 14px;\n  border-radius: 50%;\n  border: none;\n  background-color: var(--accent-color);\n  z-index: 1;\n  cursor: pointer;\n  ${min(tablet)} {\n    bottom: 19px;\n  }\n  ${min(desktop)} {\n    position: absolute;\n    bottom: 16px;\n    right: 24px;\n    width: 24px;\n    height: 24px;\n    border-radius: 50%;\n    border: none;\n    background-color: var(--accent-color);\n    cursor: pointer;\n  }\n`;\nexport const AddAvatar = styled.svg`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  width: 8px;\n  height: 8px;\n  fill: transparent;\n  stroke: var(--primary-bg-color);\n  .dark & {\n    stroke: var(--primary-text-color);\n  }\n  ${min(tablet)} {\n  }\n  ${min(desktop)} {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    width: 24px;\n    height: 24px;\n    fill: transparent;\n    stroke: var(--primary-bg-color);\n    .dark & {\n      stroke: var(--primary-text-color);\n    }\n  }\n`;\nexport const UserAvatar = styled.svg`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  width: 48px;\n  height: 48px;\n  fill: #3e85f32e;\n  .dark & {\n    fill: #ffffff2e;\n  }\n  ${min(tablet)} {\n  }\n  ${min(desktop)} {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    width: 48px;\n    height: 48px;\n    fill: #3e85f32e;\n    .dark & {\n      fill: #ffffff2e;\n    }\n  }\n`;\nexport const UserName = styled.p`\n  color: var(--secondary-text-color);\n  font-family: Inter;\n  font-size: 14px;\n\n  font-weight: 700;\n  line-height: 18px;\n  margin: 0 0 4px 0;\n  .dark & {\n    color: var(--primary-text-color);\n  }\n  ${min(desktop)} {\n    color: var(--secondary-text-color);\n    font-family: Inter;\n    font-size: 18px;\n    font-weight: 700;\n    line-height: 18px;\n    margin: 0 0 8px 0;\n    .dark & {\n      color: var(--primary-text-color);\n    }\n  }\n`;\nexport const UserStatus = styled.p`\n  margin: 0;\n  color: var(--secondary-text-color);\n  font-family: Inter;\n  font-size: 12px;\n\n  font-weight: 600;\n  line-height: 14px;\n  .dark & {\n    color: var(--user-label-color);\n  }\n  ${min(desktop)} {\n    margin: 0;\n    color: var(--secondary-text-color);\n    font-family: Inter;\n    font-size: 14px;\n\n    font-weight: 600;\n    line-height: 18px;\n    .dark & {\n      color: var(--user-label-color);\n    }\n  }\n`;\n\nexport const InputFile = styled.input`\n  display: none;\n`;\n\nexport const AvatarImage = styled.img`\n  width: 100%;\n  height: 100%;\n\n  object-fit: cover;\n`;\nexport const UserWrapper = styled.div`\n  position: relative;\n`;\n","import React from 'react';\nimport sprite from '../../../assets/images/icons/icons.svg';\n\nimport {\n  UserContainer,\n  AvatarWrapper,\n  UserAvatar,\n  AddAvatar,\n  AddAvatarButton,\n  UserName,\n  UserStatus,\n  InputFile,\n  AvatarImage,\n  UserWrapper,\n} from './UserInfo.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { updateUserAvatarOperation } from 'redux/auth/operations';\nimport { selectUser, selectUserAvatar } from 'redux/auth/selectors';\n\nexport const UserInfo = () => {\n  const dispatch = useDispatch();\n  const avatarCloud = useSelector(selectUserAvatar);\n  const { name } = useSelector(selectUser);\n\n  const fileInputChange = e => {\n    const file = e.target.files[0];\n    const formData = new FormData();\n    formData.append('avatar', file);\n    dispatch(updateUserAvatarOperation(formData));\n  };\n\n  return (\n    <UserContainer>\n      <UserWrapper>\n        <AddAvatarButton>\n          <InputFile type=\"file\" name=\"avatar\" onChange={fileInputChange} />\n          <AddAvatar>\n            <use href={`${sprite}#icon-plus`}></use>\n          </AddAvatar>\n        </AddAvatarButton>\n        <AvatarWrapper>\n          {avatarCloud ? (\n            <AvatarImage src={avatarCloud} alt=\"avatar\" />\n          ) : (\n            <UserAvatar>\n              <use href={`${sprite}#icon-ph_user`}></use>\n            </UserAvatar>\n          )}\n        </AvatarWrapper>\n      </UserWrapper>\n      <UserName>{name}</UserName>\n      <UserStatus>User</UserStatus>\n    </UserContainer>\n  );\n};\n","import styled from '@emotion/styled';\nimport { Form, Field } from 'formik';\nimport { min, tablet, desktop } from 'styles/media';\nexport const Container = styled.div`\n  max-width: 335px;\n  height: 653px;\n  border-radius: 16px;\n  background-color: var(--primary-bg-color);\n  .dark & {\n    background-color: var(--primary-bg-color);\n  }\n  ${min(tablet)} {\n    max-width: 704px;\n    height: 854px;\n  }\n\n  ${min(desktop)} {\n    max-width: 1087px;\n    height: 752px;\n    background-image: none;\n    border-radius: 16px;\n    background-color: var(--primary-bg-color);\n    .dark & {\n      background-color: var(--primary-bg-color);\n    }\n  }\n`;\n\nexport const AddUserForm = styled(Form)`\n  max-width: 299px;\n  height: 392px;\n  margin: 0 auto;\n  ${min(tablet)} {\n    margin: 0 auto;\n    max-width: 354px;\n    height: 458px;\n  }\n  ${min(desktop)} {\n    position: relative;\n    max-width: 758px;\n    height: 200px;\n    margin: 0 auto;\n    display: grid;\n    grid-template: repeat(3, 1fr) / repeat(2, 1fr);\n    justify-content: center;\n    gap: 18px 50px;\n  }\n`;\nexport const FieldContainer = styled.div`\n  position: relative;\n  max-width: 283px;\n\n  ${min(tablet)} {\n    max-width: 334px;\n  }\n`;\nexport const FormField = styled(Field)`\n  ::-webkit-calendar-picker-indicator {\n    margin: 0 10px 0;\n    cursor: pointer;\n    opacity: 0;\n  }\n  max-width: 299px;\n  padding: 12px 0 12px 14px;\n  margin-bottom: 18px;\n  border: 1px solid;\n  border-color: ${({ errors, touched }) =>\n    touched\n      ? errors\n        ? 'var(--error-color);'\n        : 'var(--success-color);'\n      : 'var(--input-border-color);'};\n  border-radius: 8px;\n  color: var(--primary-text-color);\n  font-family: Inter;\n  font-size: 14px;\n  font-weight: 600;\n  line-height: 18px;\n  &focus {\n    border-color: var(--input-border-color-focus);\n  }\n  .dark & {\n    background-color: var(--primary-bg-color);\n    color: var(--primary-text-color);\n    border-color: var(--calendar-grid-border);\n  }\n\n  ${min(tablet)} {\n    max-width: 334px;\n    padding: 14px 0 14px 18px;\n    margin-bottom: 24px;\n  }\n  ${min(desktop)} {\n    margin: 0;\n    font-size: 14px;\n    font-weight: 600;\n    line-height: 18px;\n    &focus {\n      border-color: var(--input-border-color-focus);\n    }\n    .dark & {\n      background-color: var(--primary-bg-color);\n      color: var(--primary-text-color);\n      border-color: var(--calendar-grid-border);\n    }\n  }\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  color: var(--primary-text-color);\n  font-family: Inter;\n  font-size: 12px;\n  line-height: 14px;\n  .dark & {\n    color: var(--user-label-color);\n  }\n  ${min(desktop)} {\n    display: flex;\n    flex-direction: column;\n    gap: 8px;\n    color: var(--primary-text-color);\n    font-family: Inter;\n    font-size: 14px;\n    line-height: 18px;\n    .dark & {\n      color: var(--user-label-color);\n    }\n  }\n`;\nexport const Span = styled.div`\n  position: relative;\n  max-width: 299px;\n  ${min(tablet)} {\n    max-width: 354px;\n  }\n`;\n\nexport const ChevronDown = styled.svg`\n  position: absolute;\n  top: 36px;\n  right: 14px;\n  width: 18px;\n  height: 18px;\n  cursor: pointer;\n  pointer-events: none;\n  fill: var(--primary-text-color);\n  ${min(tablet)} {\n    top: 38px;\n  }\n  ${min(desktop)} {\n    top: 42px;\n  }\n`;\n\nexport const ButtonContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  margin-top: 22px;\n\n  ${min(desktop)} {\n    position: absolute;\n    top: 352px;\n    left: 50%;\n    transform: translate(-50%, -50%);\n  }\n`;\n\nexport const Button = styled.button`\n  width: 196px;\n  height: 46px;\n  border: none;\n  cursor: pointer;\n  padding: 10px 0px;\n  border-radius: 16px;\n  color: var(--primary-bg-color);\n  background-color: var(--btn-bg-color);\n  text-align: center;\n  font-size: 14px;\n  font-weight: 600;\n  line-height: 18px;\n\n  &:hover {\n    background-color: var(--btn-bg-hover);\n  }\n  .dark & {\n    color: var(--primary-text-color);\n  }\n\n  ${min(desktop)} {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 10px;\n    flex-shrink: 0;\n    max-width: 262px;\n    height: 48px;\n    border: none;\n    cursor: pointer;\n    padding: 10px 0px;\n    border-radius: 16px;\n    color: var(--primary-bg-color);\n    background-color: var(--btn-bg-color);\n\n    &:hover {\n      background-color: var(--btn-bg-hover);\n    }\n    .dark & {\n      color: var(--primary-text-color);\n    }\n  }\n`;\nexport const IconStatus = styled.svg`\n  position: absolute;\n  fill: ${({ error }) =>\n    error ? 'var(--error-color)' : 'var(--success-color)'};\n  height: 22px;\n  width: 22px;\n  right: 14px;\n  top: 45px;\n  transform: translateY(-50%);\n\n  ${min(tablet)} {\n    height: 24px;\n    width: 24px;\n    right: 18px;\n  }\n  ${min(desktop)} {\n    top: 50px;\n  }\n`;\nexport const ErrorMessageText = styled.span`\n  position: absolute;\n  top: 70px;\n  font-size: 12px;\n  font-weight: 400;\n  line-height: 14px;\n  color: ${({ error }) =>\n    error ? 'var(--error-color)' : 'var(--success-color)'};\n  ${min(tablet)} {\n    top: 75px;\n  }\n  ${min(desktop)} {\n    top: 80px;\n  }\n`;\n","import React from 'react';\nimport { Formik, useFormik } from 'formik';\nimport { object, string, number, date } from 'yup';\nimport sprite from '../../../assets/images/icons/icons.svg';\nimport { UserInfo } from '../UserInfo/UserInfo';\nimport {\n  Container,\n  AddUserForm,\n  FormField,\n  Label,\n  Button,\n  ButtonContainer,\n  ChevronDown,\n  Span,\n  IconStatus,\n  FieldContainer,\n  ErrorMessageText,\n} from './UserForm.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { updateUserDataOperation } from 'redux/auth/operations';\nimport { selectUser } from 'redux/auth/selectors';\nimport { Notify } from 'notiflix';\n\nconst schema = object().shape({\n  username: string().max(16).required(),\n  phone: number(),\n  birthday: date(),\n  skype: string().max(16),\n  email: string().email().required(),\n});\n\nexport const UserForm = () => {\n  const dispatch = useDispatch();\n  const user = useSelector(selectUser);\n\n  const initialValues = {\n    username: user.name,\n    phone: user.phone,\n    birthday: user.birthday,\n    skype: user.social,\n    email: user.email,\n  };\n\n  const {\n    values,\n    errors,\n    touched,\n    resetForm,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n  } = useFormik({\n    initialValues: initialValues,\n    validationSchema: schema,\n    validateOnChange: false,\n    onSubmit: onSubmit,\n  });\n\n  async function onSubmit(values) {\n    const newData = {\n      name: values.username,\n      email: values.email,\n      birthday: values.birthday,\n      phone: values.phone,\n      social: values.skype,\n    };\n\n    await dispatch(updateUserDataOperation(newData));\n    Notify.success('Data update successfully');\n    resetForm();\n  }\n\n  return (\n    <Container>\n      <UserInfo />\n      <Formik>\n        <AddUserForm name=\"userform\" autoComplete=\"off\" onSubmit={handleSubmit}>\n          <FieldContainer>\n            <Label>\n              User Name\n              <FormField\n                type=\"text\"\n                name=\"username\"\n                placeholder=\"Enter your name\"\n                value={values.username ?? ''}\n                onChange={handleChange('username')}\n                onBlur={handleBlur('username')}\n                errors={errors.username}\n                touched={touched.username ? touched.username.toString() : ''}\n              />\n              {touched.username && (\n                <IconStatus error={errors.username}>\n                  <use\n                    xlinkHref={`${sprite}${\n                      errors.username ? '#icon-error' : '#icon-done'\n                    }`}\n                  />\n                </IconStatus>\n              )}\n              {touched.username &&\n                (errors.username ? (\n                  <ErrorMessageText error>{errors.username}</ErrorMessageText>\n                ) : (\n                  <ErrorMessageText>This is an CORRECT name</ErrorMessageText>\n                ))}\n            </Label>\n          </FieldContainer>\n          <FieldContainer>\n            <Label>\n              Phone\n              <FormField\n                type=\"tel\"\n                name=\"phone\"\n                placeholder=\"Enter your phone number\"\n                value={values.phone ?? ''}\n                onChange={handleChange('phone')}\n                onBlur={handleBlur('phone')}\n                errors={errors.phone}\n                touched={touched.phone ? touched.phone.toString() : ''}\n              />\n              {touched.phone && (\n                <IconStatus error={errors.phone}>\n                  <use\n                    xlinkHref={`${sprite}${\n                      errors.phone ? '#icon-error' : '#icon-done'\n                    }`}\n                  />\n                </IconStatus>\n              )}\n              {touched.phone &&\n                (errors.phone ? (\n                  <ErrorMessageText error>{errors.phone}</ErrorMessageText>\n                ) : (\n                  <ErrorMessageText>This is an CORRECT phone</ErrorMessageText>\n                ))}\n            </Label>\n          </FieldContainer>\n          <Span>\n            <FieldContainer>\n              <Label>\n                Birthday\n                <FormField\n                  type=\"date\"\n                  name=\"birthday\"\n                  placeholder=\"YYYY - MM - DD\"\n                  value={values.birthday ?? ''}\n                  onChange={handleChange('birthday')}\n                  onBlur={handleBlur('birthday')}\n                  errors={errors.birthday}\n                  touched={touched.birthday ? touched.birthday.toString() : ''}\n                />\n                <ChevronDown>\n                  <use href={`${sprite}#icon-chevron-down`}></use>\n                </ChevronDown>\n                {touched.birthday && (\n                  <IconStatus error={errors.birthday}>\n                    <use\n                      xlinkHref={`${sprite}${\n                        errors.birthday ? '#icon-error' : '#icon-done'\n                      }`}\n                    />\n                  </IconStatus>\n                )}\n                {touched.birthday &&\n                  (errors.birthday ? (\n                    <ErrorMessageText error>{errors.birthday}</ErrorMessageText>\n                  ) : (\n                    <ErrorMessageText>This is an CORRECT date</ErrorMessageText>\n                  ))}\n              </Label>\n            </FieldContainer>\n          </Span>\n          <FieldContainer>\n            <Label>\n              Skype\n              <FormField\n                type=\"text\"\n                name=\"skype\"\n                placeholder=\"Add a skype number\"\n                value={values.skype ?? ''}\n                onChange={handleChange('skype')}\n                onBlur={handleBlur('skype')}\n                errors={errors.skype}\n                touched={touched.skype ? touched.skype.toString() : ''}\n              />\n              {touched.skype && (\n                <IconStatus error={errors.skype}>\n                  <use\n                    xlinkHref={`${sprite}${\n                      errors.skype ? '#icon-error' : '#icon-done'\n                    }`}\n                  />\n                </IconStatus>\n              )}\n              {touched.skype &&\n                (errors.skype ? (\n                  <ErrorMessageText error>{errors.skype}</ErrorMessageText>\n                ) : (\n                  <ErrorMessageText>\n                    This is an CORRECT skype number\n                  </ErrorMessageText>\n                ))}\n            </Label>\n          </FieldContainer>\n          <FieldContainer>\n            <Label>\n              Email\n              <FormField\n                type=\"email\"\n                name=\"email\"\n                placeholder=\"Enter your email\"\n                value={values.email ?? ''}\n                onChange={handleChange('email')}\n                onBlur={handleBlur('email')}\n                errors={errors.email}\n                touched={touched.email ? touched.email.toString() : ''}\n              />\n              {touched.email && (\n                <IconStatus error={errors.email}>\n                  <use\n                    xlinkHref={`${sprite}${\n                      errors.email ? '#icon-error' : '#icon-done'\n                    }`}\n                  />\n                </IconStatus>\n              )}\n              {touched.email &&\n                (errors.email ? (\n                  <ErrorMessageText error>{errors.email}</ErrorMessageText>\n                ) : (\n                  <ErrorMessageText>This is an CORRECT email</ErrorMessageText>\n                ))}\n            </Label>\n          </FieldContainer>\n          <ButtonContainer>\n            <Button type=\"submit\">Save changes</Button>\n          </ButtonContainer>\n        </AddUserForm>\n      </Formik>\n    </Container>\n  );\n};\n","import React from 'react';\nimport { UserForm } from 'components/Account/UserForm/UserForm';\nimport { MainContainer } from 'components/MainContainer/MainContainer';\nconst AccountPage = () => {\n  return (\n    <MainContainer>\n      <UserForm />\n    </MainContainer>\n  );\n};\n\nexport default AccountPage;\n"],"names":["Main","styled","min","tablet","desktop","Container","MainContainer","children","UserContainer","AvatarWrapper","AddAvatarButton","AddAvatar","UserAvatar","UserName","UserStatus","InputFile","AvatarImage","UserWrapper","UserInfo","dispatch","useDispatch","avatarCloud","useSelector","selectUserAvatar","name","selectUser","type","onChange","e","file","target","files","formData","FormData","append","updateUserAvatarOperation","href","sprite","src","alt","AddUserForm","Form","FieldContainer","FormField","Field","errors","touched","Label","Span","ChevronDown","ButtonContainer","Button","IconStatus","error","ErrorMessageText","schema","object","shape","username","string","max","required","phone","number","birthday","date","skype","email","UserForm","user","initialValues","social","useFormik","validationSchema","validateOnChange","onSubmit","values","resetForm","handleChange","handleBlur","handleSubmit","newData","updateUserDataOperation","Notify","autoComplete","placeholder","value","onBlur","toString","xlinkHref"],"sourceRoot":""}