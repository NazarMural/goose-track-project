{"version":3,"file":"static/js/757.24766d12.chunk.js","mappings":"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","sources":["components/MainContainer/MainContainer.styled.jsx","components/MainContainer/MainContainer.jsx","redux/tasks/selectors.js","components/Statistics/StatisticsChart/StatisticsСhart.styled.jsx","components/Statistics/StatisticsChart/StatisticsChart.jsx","pages/StatisticsPage.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { desktop, min, tablet } from 'styles/media';\n\nexport const Main = styled.main`\n  background-color: var(--page-bg-color);\n  padding-top: 64px;\n  padding-bottom: 40px;\n\n  ${min(tablet)} {\n    padding-bottom: 38px;\n  }\n\n  ${min(desktop)} {\n    padding-top: 38px;\n    padding-bottom: 32px;\n  }\n`;\n\nexport const Container = styled.div`\n  padding: 0 20px;\n\n  ${min(tablet)} {\n    padding: 0 32px;\n  }\n`;\n","import { Container, Main } from './MainContainer.styled';\n\nexport const MainContainer = ({ children }) => {\n  return (\n    <Main>\n      <Container>{children}</Container>\n    </Main>\n  );\n};\n","import { createSelector } from '@reduxjs/toolkit';\n\nconst selectTasksState = state => state.tasks;\nconst selectTasks = state => state.tasks.tasks;\nconst selectTasksError = state => state.tasks.error;\nconst selectIsTasksLoading = state => state.tasks.isTasksLoading;\nconst selectIsFetchingTasks = state => state.tasks.isFetchingTasks;\nconst selectIsAdding = state => state.tasks.isAdding;\nconst selectIsDeleting = state => state.tasks.isDeleting;\nconst selectIsUpdating = state => state.tasks.isUpdating;\nconst selectCurrentTaskId = state => state.tasks.currentTaskId;\n\nconst selectTaskOperations = createSelector(\n  [selectIsFetchingTasks, selectIsAdding, selectIsDeleting, selectIsUpdating],\n  (isFetchingTasks, isAdding, isDeleting, isUpdating) => ({\n    isFetchingTasks,\n    isAdding,\n    isDeleting,\n    isUpdating,\n  })\n);\n\nexport {\n  selectTasks,\n  selectCurrentTaskId,\n  selectTasksError,\n  selectIsAdding,\n  selectIsDeleting,\n  selectIsTasksLoading,\n  selectIsUpdating,\n  selectIsFetchingTasks,\n  selectTaskOperations,\n  selectTasksState,\n};\n","import styled from '@emotion/styled';\nimport { desktop, min, tablet } from 'styles/media';\n\nexport const СhartContainer = styled.div``;\n\nexport const StatisticsContainer = styled.div`\n  padding: 28px 14px;\n  max-width: 335px;\n  background-color: var(--primary-bg-color);\n\n  ${min(tablet)} {\n    min-width: 704px;\n  }\n\n  ${min(desktop)} {\n    min-width: 1087px;\n  }\n`;\n\nexport const LegendContainer = styled.div`\n  display: flex;\n  gap: 14px;\n  margin-bottom: 40px;\n`;\n\nexport const Legend = styled.p`\n  display: flex;\n  align-items: center;\n\n  color: var(--secondary-text-color);\n  font-size: 14px;\n  line-height: 1.28;\n\n  ::before {\n    content: '';\n    display: inline-block;\n    width: 8px; /* Діаметр кружечка */\n    height: 8px; /* Діаметр кружечка */\n    border-radius: 50%; /* Робимо кружечок */\n    margin-right: 5px; /* Відстань між кружечком і текстом */\n  }\n`;\n\nexport const DayLegend = styled(Legend)`\n  ::before {\n    background-color: var(--legend-day); /* Червоний кружечок */\n  }\n`;\n\nexport const MonthLegend = styled(Legend)`\n  ::before {\n    background-color: var(--legend-month); /* Зелений кружечок */\n  }\n`;\n\nexport const ChartTasks = styled.p`\n  margin-bottom: 14px;\n\n  color: var(--secondary-text-color);\n  font-size: 14px;\n  font-weight: 600;\n  line-height: 1.5;\n`;\n","import React, { useEffect, useState } from 'react';\nimport { Chart } from 'chart.js/auto';\nimport ChartDataLabels from 'chartjs-plugin-datalabels';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchTasksOperation } from 'redux/tasks/operations';\nimport { selectTasks } from 'redux/tasks/selectors';\nimport moment from 'moment';\n\nimport {\n  СhartContainer,\n  StatisticsContainer,\n  LegendContainer,\n  DayLegend,\n  MonthLegend,\n  ChartTasks,\n} from './StatisticsСhart.styled';\n\nconst StatisticsСhart = () => {\n  const dispatch = useDispatch();\n  const tasks = useSelector(selectTasks);\n  const dataDay = moment().format('YYYY-MM-DD');\n\n  const [currentDay] = useState(dataDay);\n\n  useEffect(() => {\n    (async () => {\n      const { payload } = await dispatch(fetchTasksOperation());\n      const filteredTasks = payload\n        ? payload.filter(({ date }) => date === currentDay)\n        : [];\n\n      console.log(filteredTasks);\n    })();\n  }, [currentDay, dispatch]);\n\n  useEffect(() => {\n    Chart.register(ChartDataLabels);\n    const canvas = document.getElementById('myChart');\n\n    const existingChart = Chart.getChart(canvas); // Отримуємо попередній графік\n\n    if (existingChart) {\n      existingChart.destroy(); // Видаляємо попередній графік, якщо він існує\n    }\n\n    new Chart(canvas, {\n      type: 'bar',\n      data: {\n        labels: ['to-do', 'in-progress', 'done'],\n\n        datasets: [\n          {\n            label: '# of Votes',\n            data: [14, 4, 24],\n            lab: [`${30}%`, `${50}%`, `${20}%`],\n            backgroundColor: '#FFD2DD',\n          },\n          {\n            label: '# of Votes',\n            data: [18, 14, 13],\n            lab: [`${35}%`, `${55}%`, `${25}%`],\n            backgroundColor: '#3E85F3',\n          },\n        ],\n      },\n      plugins: [ChartDataLabels],\n      options: {\n        parsing: {\n          xAxisKey: 'id',\n          yAxisKey: 'value',\n        },\n        plugins: {\n          legend: {\n            display: false,\n          },\n          datalabels: {\n            color: 'bleak',\n            anchor: 'end',\n            align: 'top',\n            offset: 0,\n            formatter: function (value, context) {\n              return context.dataset.lab[context.dataIndex];\n            },\n          },\n        },\n        scales: {\n          y: {\n            beginAtZero: true,\n          },\n        },\n      },\n    });\n  }, [tasks]);\n\n  return (\n    <StatisticsContainer>\n      <LegendContainer>\n        <DayLegend>By Day</DayLegend>\n        <MonthLegend>By Month</MonthLegend>\n      </LegendContainer>\n      <СhartContainer>\n        <ChartTasks>Tasks</ChartTasks>\n        <canvas id=\"myChart\"></canvas>\n      </СhartContainer>\n    </StatisticsContainer>\n  );\n};\n\nexport default StatisticsСhart;\n","import React from 'react';\nimport StatisticsСhart from 'components/Statistics/StatisticsChart/StatisticsChart';\nimport { MainContainer } from 'components/MainContainer/MainContainer';\n\nconst StatisticsPage = () => {\n  return (\n    <MainContainer>\n      <StatisticsСhart />\n    </MainContainer>\n  );\n};\n\nexport default StatisticsPage;\n"],"names":["Main","styled","min","tablet","desktop","Container","MainContainer","children","selectTasks","state","tasks","createSelector","isFetchingTasks","isAdding","isDeleting","isUpdating","СhartContainer","StatisticsContainer","LegendContainer","Legend","DayLegend","MonthLegend","ChartTasks","dispatch","useDispatch","useSelector","dataDay","moment","format","useState","currentDay","useEffect","fetchTasksOperation","payload","filteredTasks","filter","date","console","log","Chart","ChartDataLabels","canvas","document","getElementById","existingChart","destroy","type","data","labels","datasets","label","lab","backgroundColor","plugins","options","parsing","xAxisKey","yAxisKey","legend","display","datalabels","color","anchor","align","offset","formatter","value","context","dataset","dataIndex","scales","y","beginAtZero","id"],"sourceRoot":""}