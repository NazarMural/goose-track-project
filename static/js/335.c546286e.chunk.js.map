{"version":3,"file":"static/js/335.c546286e.chunk.js","mappings":"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","sources":["components/Calendar/ChoosedMonth/CalendarTable/CalendarTable.styled.jsx","components/Calendar/ChoosedMonth/TaskList/TaskList.styled.jsx","components/Calendar/ChoosedMonth/TaskList/TaskList.jsx","components/Calendar/ChoosedMonth/CalendarTable/CalendarTable.jsx","components/Calendar/ChoosedMonth/MonthCalendarHead/MonthCalendarHead.styled.jsx","components/Calendar/ChoosedMonth/MonthCalendarHead/MonthCalendarHead.jsx","components/Calendar/ChoosedMonth/ChoosedMonth.styled.jsx","components/Calendar/ChoosedMonth/ChoosedMonth.jsx","pages/CalendarPage.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const CalendarGrid = styled.div`\n  width: 100%;\n  height: 100%;\n  /* background-color: #dce3e580; */\n  background-color: var(--calendar-grid-border);\n  display: grid;\n  grid-gap: 1px;\n  grid-template-columns: repeat(7, 1fr);\n  grid-template-rows: repeat(${props => props.rows}, 1fr);\n  border: 1px solid var(--calendar-grid-border);\n  border-radius: 8px;\n  overflow: hidden;\n`;\n\nexport const Cell = styled.div`\n  display: flex;\n  flex-direction: column;\n  /* justify-content: flex-end; */\n  /* background-color: #ffffff; */\n  background-color: var(--cell-background);\n  padding: 8px 4px;\n  height: 96px;\n`;\n\nexport const WrapperDay = styled.div`\n  display: flex;\n  text-align: end;\n  align-items: center;\n  justify-content: center;\n  align-self: flex-end;\n  height: 22px;\n  width: 22px;\n  /* padding: 4px 6px; */\n  font-size: 12px;\n  font-weight: 700;\n  margin-bottom: 14px;\n`;\n\nexport const Day = styled.div`\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border-radius: 6px;\n  color: ${props => props.color};\n  background: ${props => props.background};\n`;\n","import styled from '@emotion/styled';\nimport { NavLink } from 'react-router-dom';\n\nexport const List = styled.ul`\n  list-style: none;\n  margin: 0;\n  padding: 0;\n  overflow-y: scroll;\n`;\n\nexport const TaskItem = styled.li`\n  background-color: ${props => props.bg};\n  border-radius: 8px;\n  padding: 4px 8px;\n  /* display: flex; */\n  /* flex-wrap: nowrap; */\n  margin-bottom: 8px;\n  /* overflow-x: hidden; */\n  white-space: pre-wrap;\n  word-break: break-all;\n  word-wrap: break-word;\n`;\n\nexport const TaskLink = styled(NavLink)`\n  text-decoration: none;\n  color: ${props => props.color};\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n`;\n","import moment from 'moment';\nimport tasks from './tasks';\nimport { List, TaskItem, TaskLink } from './TaskList.styled';\n\nexport const TaskList = ({ date }) => {\n  //   const filter = tasks.filter(task => task.date === date);\n  //   const filter = tasks.filter(\n  //     task => !moment(task.date).diff(moment(date), 'day')\n  //   );\n  //   console.log(filter);\n  return (\n    <List>\n      {tasks\n        .filter(task => !moment(task.date).diff(moment(date), 'day'))\n        .map((task, idx) => (\n          <TaskItem key={idx} bg={`var(--calend-${task.priority}-bg-color)`}>\n            <TaskLink color={`var(--calend-${task.priority}-color)`}>\n              {task.title}\n            </TaskLink>\n          </TaskItem>\n        ))}\n    </List>\n  );\n};\n","import moment from 'moment';\nimport { CalendarGrid, Cell, Day, WrapperDay } from './CalendarTable.styled';\nimport { TaskList } from '../TaskList/TaskList';\n// import { useState } from 'react';\n\nconst setDay = day => {\n  moment.updateLocale('en', { week: { dow: 1 } });\n  let currentDay;\n  if (!day) {\n    currentDay = moment();\n  } else {\n    currentDay = moment(day);\n  }\n  const startMonth = currentDay.clone().startOf('month'); // початок поточного місяця\n  const endMonth = currentDay.clone().endOf('month'); // кінець поточного місяця\n\n  const startDay = startMonth.clone().startOf('week'); // перший день тижня, в якому починається поточний місяць\n  const endDay = endMonth.clone().endOf('week'); // останній день тижня, в якому закінчується поточний місяць\n\n  const dayDifference = endDay.diff(startDay, 'days') + 1; // кількість днів, що відображаються на календарі (ячейки)\n  const weeks = dayDifference / 7; //кількість тижнів в місяці (рядки)\n\n  const startCalendar = startDay.clone().subtract(1, 'day');\n  const daysArray = [...Array(dayDifference)].map(() =>\n    startCalendar.add(1, 'day').clone()\n  );\n\n  const dates = {\n    startMonth,\n    endMonth,\n    startDay,\n    endDay,\n    dayDifference,\n    weeks,\n    daysArray,\n  };\n  return dates;\n};\n\nexport const CalendarTable = () => {\n  //   const [date, setDate] = useState(Date.now);\n  const { startMonth, endMonth, weeks, daysArray } = setDay();\n  //   const dateData = setDay(date);\n  //   console.log(dateData);\n\n  const isCurrentDay = day => moment().isSame(day, 'day');\n\n  return (\n    <CalendarGrid rows={weeks}>\n      {daysArray.map((dayItem, idx) => (\n        <Cell key={idx}>\n          <WrapperDay>\n            <Day\n              color={`${\n                isCurrentDay(dayItem)\n                  ? 'var(--date-color-accent)'\n                  : `${\n                      startMonth > dayItem || endMonth < dayItem\n                        ? 'transparent'\n                        : 'var(--date-color)'\n                    }`\n              }`}\n              background={`${\n                isCurrentDay(dayItem) ? 'var(--accent-color)' : 'transparent'\n              }`}\n            >\n              {dayItem.format('D')}\n            </Day>\n          </WrapperDay>\n          <TaskList date={dayItem} />\n        </Cell>\n      ))}\n    </CalendarGrid>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const HeadWrapper = styled.div`\n  display: grid;\n  grid-template-columns: repeat(7, 1fr);\n  justify-content: center;\n  text-align: center;\n  align-items: center;\n  height: 50px;\n  border: 1px solid var(--calendar-grid-border);\n  border-radius: 8px;\n  margin-bottom: 14px;\n  overflow: hidden;\n`;\n\nexport const HeadCell = styled.div`\n  /* display: flex; */\n  /* justify-content: center; */\n  /* align-items: center; */\n  text-align: center;\n  text-transform: uppercase;\n  background-color: var(--cell-background);\n  color: ${props => props.weekend};\n\n  padding: 16px 0;\n`;\n","import { useMediaQuery } from 'react-responsive';\nimport moment from 'moment';\n\nimport { HeadCell, HeadWrapper } from './MonthCalendarHead.styled';\n\nexport const MonthCalendarHead = () => {\n  const isMobile = useMediaQuery({ maxWidth: 767 });\n  //   const day = moment().day(1).format('ddd');\n\n  //   console.log(day);\n\n  return (\n    <HeadWrapper>\n      {[...Array(7)].map((_, idx) => (\n        <HeadCell\n          key={idx}\n          weekend={\n            idx === 5 || idx === 6\n              ? `var(--accent-color)`\n              : `var(--primary-text-color)`\n          }\n        >\n          {isMobile\n            ? moment()\n                .day(idx + 1)\n                .format('ddd')\n                .charAt(0)\n            : moment()\n                .day(idx + 1)\n                .format('ddd')}\n        </HeadCell>\n      ))}\n    </HeadWrapper>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const CalendarWrapper = styled.div`\n  width: 100%;\n  height: 100%;\n  background-color: var(--page-bg-color);\n  padding: 38px 0;\n`;\n\nexport const Container = styled.div`\n  padding: 0 20px;\n`;\n","import { CalendarTable } from './CalendarTable/CalendarTable';\nimport { MonthCalendarHead } from './MonthCalendarHead/MonthCalendarHead';\nimport { CalendarWrapper, Container } from './ChoosedMonth.styled';\n\nconst ChoosedMonth = () => {\n  return (\n    <CalendarWrapper>\n      <Container>\n        <MonthCalendarHead />\n        <CalendarTable />\n      </Container>\n    </CalendarWrapper>\n  );\n};\n\nexport default ChoosedMonth;\n","import React from 'react';\nimport ChoosedMonth from 'components/Calendar/ChoosedMonth/ChoosedMonth';\n// import { CalendarTable } from 'components/Calendar/ChoosedMonth/CalendarTable/CalendarTable';\n\nconst CalendarPage = () => {\n  return <ChoosedMonth />;\n};\n\nexport default CalendarPage;\n"],"names":["CalendarGrid","styled","props","rows","Cell","WrapperDay","Day","color","background","List","TaskItem","bg","TaskLink","NavLink","TaskList","date","tasks","task","moment","diff","map","idx","priority","title","CalendarTable","day","currentDay","week","dow","startMonth","clone","startOf","endMonth","endOf","startDay","endDay","dayDifference","weeks","startCalendar","subtract","daysArray","Array","add","setDay","isCurrentDay","isSame","dayItem","format","HeadWrapper","HeadCell","weekend","MonthCalendarHead","isMobile","useMediaQuery","maxWidth","_","charAt","CalendarWrapper","Container"],"sourceRoot":""}