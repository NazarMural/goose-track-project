{"version":3,"file":"static/js/730.e88f2500.chunk.js","mappings":"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","sources":["components/Calendar/ChoosedMonth/CalendarTable/CalendarTable.styled.jsx","components/Calendar/ChoosedMonth/TaskList/TaskList.styled.jsx","components/Calendar/ChoosedMonth/TaskList/TaskList.jsx","components/Calendar/ChoosedMonth/CalendarTable/CalendarTable.jsx","components/Calendar/ChoosedMonth/MonthCalendarHead/MonthCalendarHead.styled.jsx","components/Calendar/ChoosedMonth/MonthCalendarHead/MonthCalendarHead.jsx","components/Calendar/ChoosedMonth/ChoosedMonth.styled.jsx","components/Calendar/ChoosedMonth/ChoosedMonth.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n// import { NavLink } from 'react-router-dom';\nimport { desktop, min, tablet } from 'styles/media';\n\nexport const CalendarGrid = styled.div`\n  width: 100%;\n  height: 100%;\n  /* background-color: #dce3e580; */\n  background-color: var(--calendar-grid-border);\n  display: grid;\n  grid-gap: 1px;\n  grid-template-columns: repeat(7, 1fr);\n  grid-template-rows: repeat(${props => props.rows}, 1fr);\n  border: 1px solid var(--calendar-grid-border);\n  border-radius: 8px;\n  overflow: hidden;\n`;\n\nexport const Cell = styled.div`\n  display: flex;\n  flex-direction: column;\n  /* justify-content: flex-end; */\n  /* background-color: #ffffff; */\n  background-color: var(--cell-background);\n  padding: 8px 0;\n  height: 94px;\n\n  ${min(tablet)} {\n    padding: 14px 0;\n    min-height: 144px;\n  }\n\n  ${min(desktop)} {\n    min-height: 125px;\n  }\n`;\n\nexport const DayLink = styled.div`\n  display: flex;\n  justify-content: flex-end;\n  cursor: pointer;\n`;\n\nexport const WrapperDay = styled.div`\n  display: flex;\n  text-align: end;\n  align-items: center;\n  justify-content: center;\n  align-self: flex-end;\n  height: 22px;\n  width: 22px;\n  text-decoration: none;\n  font-size: 12px;\n  font-weight: 700;\n  margin-bottom: 14px;\n  margin-right: 4px;\n  cursor: pointer;\n\n  ${min(tablet)} {\n    margin-right: 14px;\n  }\n`;\n\nexport const Day = styled.div`\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 4px 6px;\n  border-radius: 6px;\n  color: ${props => props.color};\n  background: ${props => props.background};\n`;\n","import styled from '@emotion/styled';\n// import { NavLink } from 'react-router-dom';\nimport { desktop, min, tablet } from 'styles/media';\n\nexport const List = styled.ul`\n  list-style: none;\n  margin: 0;\n  padding: 0 2px;\n  overflow-y: auto;\n  max-width: 44px;\n  /* width: 100%; */\n  /* max-width: 100%; */\n  height: 65px;\n\n  &::-webkit-scrollbar {\n    width: 8px;\n  }\n\n  &::-webkit-scrollbar-track {\n    background: var(--task-scrollbar-track);\n    border-radius: 12px;\n  }\n\n  &::-webkit-scrollbar-thumb {\n    background: var(--task-scrollbar-thumb);\n    border-radius: 12px;\n  }\n\n  /* Handle on hover */\n  &::-webkit-scrollbar-thumb:hover {\n    background: var(--task-scrollbar-thumb-hover);\n  }\n\n  ${min(tablet)} {\n    max-width: 92px;\n    /* max-width: 100%; */\n    padding: 0 4px;\n  }\n\n  ${min(desktop)} {\n    max-width: 139px;\n  }\n`;\n\nexport const TaskItem = styled.li`\n  background-color: ${props => props.bg};\n  color: ${props => props.color};\n  border-radius: 8px;\n  padding: 4px 8px;\n  /* display: flex; */\n  /* flex-wrap: nowrap; */\n  margin-bottom: 8px;\n  /* max-width: 100%; */\n  /* overflow-x: hidden; */\n  /* white-space: pre-wrap;\n  word-break: break-all;\n  word-wrap: break-word; */\n  max-width: 44px;  \n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  cursor: pointer;\n\n${min(tablet)} {\n    max-width: 92px;\n  }\n\n  ${min(desktop)} {\n    max-width: 139px;\n  } \n`;\n\nexport const TaskLink = styled.p`\n  text-decoration: none;\n  /* color: ${props => props.color}; */\n  color: inherit;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n`;\n","import { useState } from 'react';\nimport moment from 'moment';\nimport PropTypes from 'prop-types';\n\nimport { List, TaskItem, TaskLink } from './TaskList.styled';\nimport { TaskModal } from 'components/TaskModal/TaskModal';\n\nexport const TaskList = ({ tasks, currentDate }) => {\n  const [isFormOpen, setIsFormOpen] = useState(false);\n  const [taskForForm, setTaskForForm] = useState({});\n\n  const handleChangeTask = task => {\n    setTaskForForm(task);\n    setIsFormOpen(true);\n  };\n\n  const closeForm = () => {\n    setTaskForForm({});\n    setIsFormOpen(false);\n  };\n\n  return (\n    <List>\n      {tasks\n        .filter(task => !moment(task.date).diff(moment(currentDate), 'day'))\n        .map((task, idx) => (\n          <TaskItem\n            key={idx + 1}\n            bg={`var(--calend-${task.priority}-bg-color)`}\n            color={`var(--calend-${task.priority}-color)`}\n          >\n            <div onClick={() => handleChangeTask(task)} id=\"task-link\">\n              <TaskLink>{task.title}</TaskLink>\n            </div>\n            {isFormOpen && (\n              <TaskModal\n                isOpen={isFormOpen}\n                onClose={closeForm}\n                category={task.category}\n                task={taskForForm}\n              />\n            )}\n          </TaskItem>\n        ))}\n    </List>\n  );\n};\n\nTaskList.propTypes = {\n  tasks: PropTypes.array,\n  currentDate: PropTypes.object.isRequired,\n};\n\n","import moment from 'moment';\nimport {\n  CalendarGrid,\n  Cell,\n  Day,\n  DayLink,\n  WrapperDay,\n} from './CalendarTable.styled';\nimport { TaskList } from '../TaskList/TaskList';\nimport { setDay } from 'helpers/setDay';\nimport { useNavigate, useParams } from 'react-router';\nimport { useEffect, useState } from 'react';\nimport { fetchTasksOperation } from 'redux/tasks/operations';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectIsUpdating } from 'redux/tasks/selectors';\n\nexport const CalendarTable = () => {\n  const { currentMonth } = useParams();\n  const [tasks, setTasks] = useState([]);\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n\n  const date = moment(`${currentMonth}-01`, 'YYYY-MM-DD');\n  const { startMonth, endMonth, weeks, daysArray } = setDay(date);\n  const isCurrentDay = day => moment().isSame(day, 'day');\n  const editTask = useSelector(selectIsUpdating);\n\n  useEffect(() => {\n    (async () => {\n      const { payload } = await dispatch(fetchTasksOperation(currentMonth));\n      setTasks(payload);\n    })();\n  }, [currentMonth, dispatch, editTask]);\n\n  const handleNavigateToDay = date => {\n    const day = moment(date).format('YYYY-MM-DD');\n    localStorage.setItem('type', 'day');\n    localStorage.setItem('date', day);\n    navigate(`/calendar/day/${day}`);\n  };\n\n  return (\n    <CalendarGrid rows={weeks}>\n      {daysArray.map((dayItem, idx) => (\n        <Cell key={idx}>\n          <DayLink onClick={() => handleNavigateToDay(dayItem)}>\n            <WrapperDay>\n              <Day\n                color={`${\n                  isCurrentDay(dayItem)\n                    ? '#FFFFFF'\n                    : `${\n                        startMonth > dayItem || endMonth < dayItem\n                          ? 'transparent'\n                          : 'var(--date-color)'\n                      }`\n                }`}\n                background={`${\n                  isCurrentDay(dayItem) ? 'var(--accent-color)' : 'transparent'\n                }`}\n              >\n                {dayItem.format('D')}\n              </Day>\n            </WrapperDay>\n          </DayLink>\n          {startMonth < dayItem && endMonth > dayItem && (\n            <TaskList currentDate={dayItem} tasks={tasks} />\n          )}\n        </Cell>\n      ))}\n    </CalendarGrid>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const HeadWrapper = styled.div`\n  display: grid;\n  grid-template-columns: repeat(7, 1fr);\n  justify-content: center;\n  text-align: center;\n  align-items: center;\n  height: 50px;\n  border: 1px solid var(--calendar-grid-border);\n  border-radius: 8px;\n  margin-bottom: 14px;\n  overflow: hidden;\n`;\n\nexport const HeadCell = styled.div`\n  /* display: flex; */\n  /* justify-content: center; */\n  /* align-items: center; */\n  text-align: center;\n  text-transform: uppercase;\n  background-color: var(--cell-background);\n  color: ${props => props.weekend};\n\n  padding: 16px 0;\n`;\n","import { useMediaQuery } from 'react-responsive';\nimport moment from 'moment';\n\nimport { HeadCell, HeadWrapper } from './MonthCalendarHead.styled';\n\nexport const MonthCalendarHead = () => {\n  const isMobile = useMediaQuery({ maxWidth: 767 });\n  //   const day = moment().day(1).format('ddd');\n  //   console.log(day);\n\n  return (\n    <HeadWrapper>\n      {[...Array(7)].map((_, idx) => (\n        <HeadCell\n          key={idx}\n          weekend={\n            idx === 5 || idx === 6\n              ? `var(--accent-color)`\n              : `var(--primary-text-color)`\n          }\n        >\n          {isMobile\n            ? moment()\n                .day(idx + 1)\n                .format('ddd')\n                .charAt(0)\n            : moment()\n                .day(idx + 1)\n                .format('ddd')}\n        </HeadCell>\n      ))}\n    </HeadWrapper>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const CalendarWrapper = styled.div`\n  width: 100%;\n  height: 100%;\n  /* background-color: var(--page-bg-color); */\n  /* padding: 38px 0; */\n`;\n\n// export const Container = styled.div`\n//   padding: 0 20px;\n// `;\n","import { CalendarTable } from './CalendarTable/CalendarTable';\nimport { MonthCalendarHead } from './MonthCalendarHead/MonthCalendarHead';\nimport { CalendarWrapper } from './ChoosedMonth.styled';\n\nconst ChoosedMonth = () => {\n  return (\n    <CalendarWrapper>\n      <MonthCalendarHead />\n      <CalendarTable />\n    </CalendarWrapper>\n  );\n};\n\nexport default ChoosedMonth;\n"],"names":["CalendarGrid","styled","props","rows","Cell","min","tablet","desktop","DayLink","WrapperDay","Day","color","background","List","TaskItem","bg","TaskLink","TaskList","tasks","currentDate","useState","isFormOpen","setIsFormOpen","taskForForm","setTaskForForm","closeForm","filter","task","moment","date","diff","map","idx","priority","onClick","handleChangeTask","id","title","TaskModal","isOpen","onClose","category","CalendarTable","currentMonth","useParams","setTasks","navigate","useNavigate","dispatch","useDispatch","setDay","startMonth","endMonth","weeks","daysArray","isCurrentDay","day","isSame","editTask","useSelector","selectIsUpdating","useEffect","fetchTasksOperation","payload","dayItem","format","localStorage","setItem","handleNavigateToDay","HeadWrapper","HeadCell","weekend","MonthCalendarHead","isMobile","useMediaQuery","maxWidth","Array","_","charAt","CalendarWrapper"],"sourceRoot":""}