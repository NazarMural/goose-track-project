{"version":3,"file":"static/js/438.8ed2c11f.chunk.js","mappings":"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","sources":["components/Calendar/ChoosedMonth/CalendarTable/CalendarTable.styled.jsx","components/Calendar/ChoosedMonth/TaskList/TaskList.styled.jsx","components/Calendar/ChoosedMonth/TaskList/TaskList.jsx","components/Calendar/ChoosedMonth/CalendarTable/CalendarTable.jsx","helpers/setDay.js","components/Calendar/ChoosedMonth/MonthCalendarHead/MonthCalendarHead.styled.jsx","components/Calendar/ChoosedMonth/MonthCalendarHead/MonthCalendarHead.jsx","components/Calendar/ChoosedMonth/ChoosedMonth.styled.jsx","components/Calendar/ChoosedMonth/ChoosedMonth.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { min, tablet } from 'styles/media';\n\nexport const CalendarGrid = styled.div`\n  width: 100%;\n  height: 100%;\n  /* background-color: #dce3e580; */\n  background-color: var(--calendar-grid-border);\n  display: grid;\n  grid-gap: 1px;\n  grid-template-columns: repeat(7, 1fr);\n  grid-template-rows: repeat(${props => props.rows}, 1fr);\n  border: 1px solid var(--calendar-grid-border);\n  border-radius: 8px;\n  overflow: hidden;\n`;\n\nexport const Cell = styled.div`\n  display: flex;\n  flex-direction: column;\n  /* justify-content: flex-end; */\n  /* background-color: #ffffff; */\n  background-color: var(--cell-background);\n  padding: 8px 0;\n  height: 96px;\n\n  ${min(tablet)} {\n    padding: 14px 0;\n  }\n`;\n\nexport const WrapperDay = styled.div`\n  display: flex;\n  text-align: end;\n  align-items: center;\n  justify-content: center;\n  align-self: flex-end;\n  height: 22px;\n  width: 22px;\n  /* padding: 4px 6px; */\n  font-size: 12px;\n  font-weight: 700;\n  margin-bottom: 14px;\n  padding-right: 4px;\n\n  ${min(tablet)} {\n    padding-right: 14px;\n  }\n`;\n\nexport const Day = styled.div`\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border-radius: 6px;\n  color: ${props => props.color};\n  background: ${props => props.background};\n`;\n","import styled from '@emotion/styled';\nimport { NavLink } from 'react-router-dom';\nimport { desktop, min, tablet } from 'styles/media';\n\nexport const List = styled.ul`\n  list-style: none;\n  margin: 0;\n  padding: 0 2px;\n  overflow-y: auto;\n  max-width: 44px;\n  /* max-width: 100%; */\n  height: 65px;\n\n  ${min(tablet)} {\n    /* max-width: 92px; */\n    max-width: 100%;\n    padding: 0 4px;\n  }\n\n  ${min(desktop)} {\n    /* max-width: 139px; */\n  }\n`;\n\nexport const TaskItem = styled.li`\n  background-color: ${props => props.bg};\n  color: ${props => props.color};\n  border-radius: 8px;\n  padding: 4px 8px;\n  /* display: flex; */\n  /* flex-wrap: nowrap; */\n  margin-bottom: 8px;\n  max-width: 100%;\n  /* overflow-x: hidden; */\n  /* white-space: pre-wrap;\n  word-break: break-all;\n  word-wrap: break-word; */\n  /* max-width: 44px; Ширина контейнера */\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n\n  /* ${min(tablet)} {\n    max-width: 92px;\n  }\n\n  ${min(desktop)} {\n    max-width: 139px;\n  } */\n`;\n\nexport const TaskLink = styled(NavLink)`\n  text-decoration: none;\n  /* color: ${props => props.color}; */\n  color: inherit;\n  /* overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap; */\n`;\n","import moment from 'moment';\nimport tasks from './tasks';\nimport { List, TaskItem, TaskLink } from './TaskList.styled';\n\nexport const TaskList = ({ date }) => {\n  //   const filter = tasks.filter(task => task.date === date);\n  //   const filter = tasks.filter(\n  //     task => !moment(task.date).diff(moment(date), 'day')\n  //   );\n  //   console.log(filter);\n  return (\n    <List>\n      {tasks\n        .filter(task => !moment(task.date).diff(moment(date), 'day'))\n        .map((task, idx) => (\n          <TaskItem\n            key={idx}\n            bg={`var(--calend-${task.priority}-bg-color)`}\n            color={`var(--calend-${task.priority}-color)`}\n          >\n            <TaskLink>{task.title}</TaskLink>\n          </TaskItem>\n        ))}\n    </List>\n  );\n};\n","import moment from 'moment';\nimport { CalendarGrid, Cell, Day, WrapperDay } from './CalendarTable.styled';\nimport { TaskList } from '../TaskList/TaskList';\nimport { setDay } from 'helpers/setDay';\nimport { useParams } from 'react-router';\n\nexport const CalendarTable = () => {\n  const { currentMonth } = useParams();\n\n  const [month, year] = currentMonth.split('-');\n  const date = moment(`${year}-${month}-01`, 'YYYY-MMMM-DD');\n\n  const { startMonth, endMonth, weeks, daysArray } = setDay(date);\n\n  const isCurrentDay = day => moment().isSame(day, 'day');\n\n  return (\n    <CalendarGrid rows={weeks}>\n      {daysArray.map((dayItem, idx) => (\n        <Cell key={idx}>\n          <WrapperDay>\n            <Day\n              color={`${\n                isCurrentDay(dayItem)\n                  ? 'var(--date-color-accent)'\n                  : `${\n                      startMonth > dayItem || endMonth < dayItem\n                        ? 'transparent'\n                        : 'var(--date-color)'\n                    }`\n              }`}\n              background={`${\n                isCurrentDay(dayItem) ? 'var(--accent-color)' : 'transparent'\n              }`}\n            >\n              {dayItem.format('D')}\n            </Day>\n          </WrapperDay>\n          {startMonth < dayItem && endMonth > dayItem && (\n            <TaskList date={dayItem} />\n          )}\n        </Cell>\n      ))}\n    </CalendarGrid>\n  );\n};\n","import moment from 'moment';\n\nexport const setDay = day => {\n  moment.updateLocale('en', { week: { dow: 1 } });\n  let currentDay;\n  if (!day) {\n    currentDay = moment();\n  } else {\n    currentDay = moment(day);\n  }\n  const startMonth = currentDay.clone().startOf('month'); // початок поточного місяця\n  const endMonth = currentDay.clone().endOf('month'); // кінець поточного місяця\n\n  const startDay = startMonth.clone().startOf('week'); // перший день тижня, в якому починається поточний місяць\n  const endDay = endMonth.clone().endOf('week'); // останній день тижня, в якому закінчується поточний місяць\n\n  const startWeek = currentDay.clone().startOf('week'); // перший день тижня, якому знаходиться обрана дата\n  const endWeek = currentDay.clone().endOf('week'); // останній  день тижня, якому знаходиться обрана дата\n\n  const dayDifference = endDay.diff(startDay, 'days') + 1; // кількість днів, що відображаються на календарі (ячейки)\n  const weeks = dayDifference / 7; //кількість тижнів в місяці (рядки)\n\n  const startCalendar = startDay.clone().subtract(1, 'day');\n  const daysArray = [...Array(dayDifference)].map(() =>\n    startCalendar.add(1, 'day').clone()\n  );\n\n  const dates = {\n    startMonth,\n    endMonth,\n    startDay,\n    endDay,\n    startWeek,\n    endWeek,\n    dayDifference,\n    weeks,\n    daysArray,\n  };\n  return dates;\n};\n","import styled from '@emotion/styled';\n\nexport const HeadWrapper = styled.div`\n  display: grid;\n  grid-template-columns: repeat(7, 1fr);\n  justify-content: center;\n  text-align: center;\n  align-items: center;\n  height: 50px;\n  border: 1px solid var(--calendar-grid-border);\n  border-radius: 8px;\n  margin-bottom: 14px;\n  overflow: hidden;\n`;\n\nexport const HeadCell = styled.div`\n  /* display: flex; */\n  /* justify-content: center; */\n  /* align-items: center; */\n  text-align: center;\n  text-transform: uppercase;\n  background-color: var(--cell-background);\n  color: ${props => props.weekend};\n\n  padding: 16px 0;\n`;\n","import { useMediaQuery } from 'react-responsive';\nimport moment from 'moment';\n\nimport { HeadCell, HeadWrapper } from './MonthCalendarHead.styled';\n\nexport const MonthCalendarHead = () => {\n  const isMobile = useMediaQuery({ maxWidth: 767 });\n  //   const day = moment().day(1).format('ddd');\n\n  //   console.log(day);\n\n  return (\n    <HeadWrapper>\n      {[...Array(7)].map((_, idx) => (\n        <HeadCell\n          key={idx}\n          weekend={\n            idx === 5 || idx === 6\n              ? `var(--accent-color)`\n              : `var(--primary-text-color)`\n          }\n        >\n          {isMobile\n            ? moment()\n                .day(idx + 1)\n                .format('ddd')\n                .charAt(0)\n            : moment()\n                .day(idx + 1)\n                .format('ddd')}\n        </HeadCell>\n      ))}\n    </HeadWrapper>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const CalendarWrapper = styled.div`\n  width: 100%;\n  height: 100%;\n  /* background-color: var(--page-bg-color); */\n  /* padding: 38px 0; */\n`;\n\n// export const Container = styled.div`\n//   padding: 0 20px;\n// `;\n","import { CalendarTable } from './CalendarTable/CalendarTable';\nimport { MonthCalendarHead } from './MonthCalendarHead/MonthCalendarHead';\nimport { CalendarWrapper } from './ChoosedMonth.styled';\n\nconst ChoosedMonth = () => {\n  const handleThemeClick = () => {\n    document.documentElement.classList.toggle('dark');\n  };\n  return (\n    <CalendarWrapper>\n      <button onClick={handleThemeClick}>Change theme</button>\n      <MonthCalendarHead />\n      <CalendarTable />\n    </CalendarWrapper>\n  );\n};\n\nexport default ChoosedMonth;\n"],"names":["CalendarGrid","styled","props","rows","Cell","min","tablet","WrapperDay","Day","color","background","List","desktop","TaskItem","bg","TaskLink","NavLink","TaskList","date","tasks","task","moment","diff","map","idx","priority","title","CalendarTable","useParams","currentMonth","split","month","year","day","currentDay","week","dow","startMonth","clone","startOf","endMonth","endOf","startDay","endDay","startWeek","endWeek","dayDifference","weeks","startCalendar","subtract","daysArray","Array","add","setDay","isCurrentDay","isSame","dayItem","format","HeadWrapper","HeadCell","weekend","MonthCalendarHead","isMobile","useMediaQuery","maxWidth","_","charAt","CalendarWrapper","onClick","document","documentElement","classList","toggle"],"sourceRoot":""}