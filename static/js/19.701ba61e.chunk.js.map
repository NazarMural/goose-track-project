{"version":3,"file":"static/js/19.701ba61e.chunk.js","mappings":"uSAGaA,EAAgBC,EAAAA,EAAAA,IAAH,gqBAQtBC,EAAAA,EAAAA,IAAIC,EAAAA,KAIJD,EAAAA,EAAAA,IAAIE,EAAAA,KA0BKC,EAAkBJ,EAAAA,EAAAA,IAAH,qQAWfK,EAAyBL,EAAAA,EAAAA,IAAH,2HAG/BC,EAAAA,EAAAA,IAAIC,EAAAA,KAKKI,EAAgBN,EAAAA,EAAAA,OAAH,8QAabO,EAAoBP,EAAAA,EAAAA,IAAH,uIASjBQ,EAAoBR,EAAAA,EAAAA,KAAH,4H,oBC/EjBS,EAAiBT,EAAAA,EAAAA,IAAH,yNAMvBC,EAAAA,EAAAA,IAAIC,EAAAA,KAMKQ,EAAYV,EAAAA,EAAAA,GAAH,wMAOlBC,EAAAA,EAAAA,IAAIC,EAAAA,KAMKS,EAAcX,EAAAA,EAAAA,IAAH,8MAQpBC,EAAAA,EAAAA,IAAIC,EAAAA,K,UCNR,EA1Bc,SAAC,GAAqB,IAAnBU,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MACrB,OACE,UAACJ,EAAD,YACE,SAACC,EAAD,UACI,WACA,OAAQE,GACN,IAAK,QACH,MAAO,QAET,IAAK,cACH,MAAO,cACT,IAAK,OACH,MAAO,OAET,QACE,OAEL,CAbC,MAeJ,SAACD,EAAD,CAAaG,QAASD,EAAtB,UACE,gBAAKE,UAAWC,EAAAA,EAAS,wBAIhC,ECzBYC,EAAYjB,EAAAA,EAAAA,GAAH,m3BAalBC,EAAAA,EAAAA,IAAIC,EAAAA,KASJD,EAAAA,EAAAA,IAAIE,EAAAA,KA0BKe,EAAOlB,EAAAA,EAAAA,GAAH,sMASJmB,EAAYnB,EAAAA,EAAAA,GAAH,yMAWToB,EAAuBpB,EAAAA,EAAAA,IAAH,+DAKpBqB,EAAYrB,EAAAA,EAAAA,IAAH,kJAOTsB,GAAgBtB,EAAAA,EAAAA,IAAH,8MAYbuB,GAAqBvB,EAAAA,EAAAA,OAAH,sOAOT,YAClB,OADoC,EAAfwB,UAEnB,IAAK,MACH,MAAO,8BACT,IAAK,SACH,MAAO,iCACT,IAAK,OACH,MAAO,+BAET,QACE,OAEL,IAKUC,GAAiBzB,EAAAA,EAAAA,IAAH,8EAMd0B,GAAW1B,EAAAA,EAAAA,IAAH,8MAQjBC,EAAAA,EAAAA,IAAIC,EAAAA,K,WCnIKyB,GAAuB3B,EAAAA,EAAAA,IAAH,8RAcpB4B,GAA2B5B,EAAAA,EAAAA,IAAH,wIASxB6B,GAAkB7B,EAAAA,EAAAA,KAAH,+H,iCCkG5B,GA9GqB,SAAC,GAMf,IALLY,EAKI,EALJA,KACAkB,EAII,EAJJA,MACAC,EAGI,EAHJA,SACAC,EAEI,EAFJA,sBACAC,EACI,EADJA,IAEMC,GAAWC,EAAAA,GAAAA,OACjBC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAe,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACtBC,QAAQC,IAAIF,EAAOG,IACD,gBAAdH,EAAOG,IACTT,GAAsB,EAEzB,EACKU,EAAa,SAAC,GACL,WADkB,EAAXC,MAElBX,GAAsB,EAEzB,EAKD,OAHAY,SAASC,iBAAiB,QAASR,GACnCO,SAASC,iBAAiB,UAAWH,GAE9B,WACLE,SAASE,oBAAoB,QAAST,GACtCO,SAASE,oBAAoB,UAAWJ,EACzC,CACF,GAAE,CAACV,IAEJ,IAqCMe,EAAS,mCAAG,WAAON,EAAIO,GAAX,uFACOd,GACrBe,EAAAA,GAAAA,IAAoB,CAClBC,OAAQT,EACRU,eAAgB,CAAEC,SAAUJ,MAJhB,kBAQHK,QAAQC,OARL,uBASdC,GAAAA,OAAAA,QAAe,iCATD,0BAaVC,EAAgB1B,EAClBA,EAAM2B,KAAI,SAAAC,GACR,OAAIA,EAAKzB,MAAQQ,GACR,oBAAKiB,GAAZ,IAAkBN,SAAUJ,IAEvBU,CACR,IACD,GAEJ3B,EAASyB,GAtBO,2CAAH,wDA0Bf,OACE,SAAC7B,GAAD,UAhEqB,SAAAf,GACrB,IAAI+C,EAAgB,GACpB,OAAQ/C,GACN,IAAK,QACH+C,EAAgB,CACd,CACElB,GAAI,EACJO,aAAc,cACdY,eAAgB,eAElB,CAAEnB,GAAI,EAAGO,aAAc,OAAQY,eAAgB,SAEjD,MAEF,IAAK,cACHD,EAAgB,CACd,CAAElB,GAAI,EAAGO,aAAc,QAASY,eAAgB,SAChD,CAAEnB,GAAI,EAAGO,aAAc,OAAQY,eAAgB,SAEjD,MACF,IAAK,OACHD,EAAgB,CACd,CAAElB,GAAI,EAAGO,aAAc,QAASY,eAAgB,SAChD,CACEnB,GAAI,EACJO,aAAc,cACdY,eAAgB,gBAQxB,OAAOD,CACR,CA8BIE,CAAejD,GAAM6C,KAAI,gBAAGhB,EAAH,EAAGA,GAAIO,EAAP,EAAOA,aAAcY,EAArB,EAAqBA,eAArB,OACxB,UAAChC,GAAD,CAEEd,QAAS,kBAAMiC,EAAUd,EAAK2B,EAArB,EAFX,WAIE,SAAC/B,GAAD,UAAkBmB,KAClB,SAACtB,GAAD,WACE,gBAAKX,UAAWC,EAAAA,EAAS,wCALtByB,EAFiB,KAa/B,E,WCnBD,GAlFc,SAAC,GAA+B,IAA7B7B,EAA4B,EAA5BA,KAAMkB,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACtBG,GAAWC,EAAAA,GAAAA,MACjB,GAAoD2B,EAAAA,EAAAA,WAAS,GAA7D,eAAOC,EAAP,KAA2B/B,EAA3B,KACMgC,GAAYC,EAAAA,GAAAA,IAAYC,GAAAA,GAQxBC,EAAS,WACb5B,QAAQC,IAAI,SACb,EACK4B,EAAQ,mCAAG,WAAMlB,GAAN,uFACQhB,GAASmC,EAAAA,GAAAA,IAAoBnB,IADrC,kBAEFG,QAAQC,OAFN,uBAGbC,GAAAA,OAAAA,QAAe,gCAHF,0BAMTC,EAAgB1B,EAClBA,EAAMwC,QAAO,qBAAGrC,MAAkBiB,CAArB,IACb,GACJnB,EAASyB,GACTD,GAAAA,OAAAA,QAAe,6BAVA,2CAAH,sDAYd,OACE,SAACtC,EAAD,UACGa,EAAM2B,KACL,YAAkE,IAA/DxB,EAA8D,EAA9DA,IAAKsC,EAAyD,EAAzDA,MAAmB/C,GAAsC,EAAlDgD,MAAkD,EAA3CC,IAA2C,EAAtCjD,UAAgB4B,GAAsB,EAA5BsB,KAA4B,EAAtBtB,UAAsB,EAAZuB,MACnD,OAAI/D,IAASwC,EACJ,IAGP,UAAClC,EAAD,YACE,SAACC,EAAD,UAAYoD,KACZ,UAACnD,EAAD,WACG4C,GACC,SAAC3C,EAAD,CAAWuD,IAAKZ,EAAWa,IAAI,iBAE/B,SAACvD,GAAD,WACE,gBAAKwD,KAAI,UAAK9D,EAAAA,EAAL,sBAGb,SAACO,GAAD,CAAoBC,SAAUA,EAA9B,SACGA,EAASuD,OAAO,GAAGC,cAAgBxD,EAASyD,MAAM,MAErD,UAACxD,GAAD,YACE,SAACC,GAAD,CACEe,GAAG,cACH3B,QAAS,WA7CI,IAAA2B,EAEzBT,EADJ+B,KAD6BtB,EA6CyBR,IA1C5BQ,EA0CD,EAFX,UAIE,gBACEA,GAAG,cACH1B,UAAWC,EAAAA,EAAS,uCAGxB,SAACU,GAAD,CAAUZ,QAASqD,EAAnB,UACE,gBAAKpD,UAAWC,EAAAA,EAAS,oBAE3B,SAACU,GAAD,CAAUZ,QAAS,kBAAMsD,EAASnC,EAAf,EAAnB,UACE,gBAAKlB,UAAWC,EAAAA,EAAS,wBAI9B+C,IAAuB9B,IACtB,SAAC,GAAD,CACErB,KAAMA,EACNkB,MAAOA,EACPC,SAAUA,EACVC,sBAAuBA,EACvBC,IAAKA,MArCAA,EA0Cd,KAIR,E,uDClGYiD,GAAgBlF,EAAAA,EAAAA,IAAH,gaAWJ,qBAAGmF,WAA8B,CAAjC,IASTC,GAAWpF,EAAAA,EAAAA,IAAH,0kBA8BRqF,GAAWrF,EAAAA,EAAAA,KAAH,iEAKRsF,GAAmBtF,EAAAA,EAAAA,IAAH,qMAUhBuF,GAAcvF,EAAAA,EAAAA,KAAH,sB,WCDxB,GArDa,WACX,IAAMwF,GAAWC,EAAAA,GAAAA,eAAc,CAAEC,SAAU,MAC3C,GAAoC5B,EAAAA,EAAAA,UAAS,IAA7C,eAAOqB,EAAP,KAAmBQ,EAAnB,KAEQC,GAAeC,EAAAA,GAAAA,MAAfD,WACFE,GAAWC,EAAAA,GAAAA,OAEjB3D,EAAAA,EAAAA,YAAU,WACR,IAAM4D,EAAkBJ,EAAWK,MAAM,KAAKhB,MAAM,GAAGiB,KAAK,KAC5D,QAAIC,MAAM,IAAI1C,KAAI,SAAC2C,EAAGC,GAOpB,OANeC,EAAAA,GAAAA,GAAOV,GACnBW,UAAUC,IAAIH,EAAM,GACpBI,OAAO,QACKT,GACbL,EAAcU,GAET,IACR,GACF,GAAE,CAACT,IAQJ,OACE,SAACV,GAAD,CAAeC,WAAYA,EAA3B,UACG,QAAIgB,MAAM,IAAI1C,KAAI,SAAC2C,EAAGC,GAAJ,OACjB,UAACjB,GAAD,CAAUtE,QAAS,kBATL,SAAA4D,GAClB,IAAMgC,EAAahC,EAAK+B,OAAO,cAC/BE,aAAaC,QAAQ,OAAQF,GAC7BZ,EAAS,MAAO,CAAEe,SAAS,GAAD,OAAKH,IAChC,CAK8BI,CAAYC,OAASP,IAAIH,EAAM,GAArC,EAAnB,WACE,SAAChB,GAAD,UACGG,EACGuB,OACGP,IAAIH,EAAM,GACVI,OAAO,OACP1B,OAAO,GACVgC,OACGP,IAAIH,EAAM,GACVI,OAAO,UAEhB,SAACnB,GAAD,WACE,SAACC,GAAD,WACGe,EAAAA,GAAAA,GAAOV,GACLW,UAAUC,IAAIH,EAAM,GACpBI,OAAO,WAfkDJ,EADjD,KAuBxB,EC9CKW,GAAa,CACjB,CAAEvE,GAAI,EAAG7B,KAAM,SACf,CAAE6B,GAAI,EAAG7B,KAAM,eACf,CAAE6B,GAAI,EAAG7B,KAAM,SAoEjB,GAjEmB,WACjB,OAA0BkD,EAAAA,EAAAA,UAAS,IAAnC,eAAOhC,EAAP,KAAcC,EAAd,KACQ6D,GAAeC,EAAAA,GAAAA,MAAfD,WACF1D,GAAWC,EAAAA,GAAAA,OAEjBC,EAAAA,EAAAA,YAAU,WAWR,OAVA,iBAAC,iGACO6E,EAAerB,EAAWK,MAAM,KAAKhB,MAAM,EAAG,GAAGiB,KAAK,KAD7D,SAG2BhE,GAASgF,EAAAA,GAAAA,IAAoBD,IAHxD,gBAGS5D,EAHT,EAGSA,QAEFG,EAAgBH,EAClBA,EAAQiB,QAAO,qBAAGI,OAAoBkB,CAAvB,IACf,GACJ7D,EAASyB,GARV,0CAAD,GAUO,WACLzB,EAAS,GACV,CACF,GAAE,CAAC6D,EAAY1D,IAmBhB,IAAMrB,EAAQ,SAAAuC,GACZb,QAAQC,IAAI,QAASY,EACtB,EAED,OACE,iCACE,SAAC,GAAD,KACA,SAACrD,EAAD,UACGiH,GAAWvD,KAAI,gBAAGhB,EAAH,EAAGA,GAAI7B,EAAP,EAAOA,KAAP,OACd,UAACR,EAAD,YACE,SAAC,EAAD,CAAOQ,KAAMA,EAAMC,MAAOA,KAC1B,SAAC,GAAD,CAAOD,KAAMA,EAAMkB,MAAOA,EAAOC,SAAUA,KAC3C,SAAC1B,EAAD,WACE,UAACC,EAAD,CAAeQ,QAASD,EAAxB,WACE,SAACN,EAAD,WACE,gBAAKQ,UAAWC,EAAAA,EAAS,kBAE3B,SAACR,EAAD,8BARgBiC,EADR,QAiBvB,C,wFCrFY6D,EAAS,SAAAE,GAEpB,IAAIZ,EADJmB,IAAAA,aAAoB,KAAM,CAAEI,KAAM,CAAEC,IAAK,KAOzC,IAAMC,GAFJzB,EAHGY,EAGUO,IAAOP,GAAKc,QAFZP,OAIeO,QAAQC,QAAQ,SACxCC,EAAW5B,EAAW0B,QAAQG,MAAM,SAEpCC,EAAWL,EAAWC,QAAQC,QAAQ,QACtCI,EAASH,EAASF,QAAQG,MAAM,QAEhClB,EAAYX,EAAW0B,QAAQC,QAAQ,QACvCK,EAAUhC,EAAW0B,QAAQG,MAAM,QAEnCI,EAAgBF,EAAOG,KAAKJ,EAAU,QAAU,EAChDK,EAAQF,EAAgB,EAExBG,EAAgBN,EAASJ,QAAQW,SAAS,EAAG,OAgBnD,MAXc,CACZZ,WAAAA,EACAG,SAAAA,EACAE,SAAAA,EACAC,OAAAA,EACApB,UAAAA,EACAqB,QAAAA,EACAC,cAAAA,EACAE,MAAAA,EACAG,WAbgB,OAAI/B,MAAM0B,IAAgBpE,KAAI,kBAC9CuE,EAAcG,IAAI,EAAG,OAAOb,OADkB,IAgBjD,C","sources":["components/Calendar/ChoosedDay/ChoosedDay.styled.jsx","components/Calendar/ChoosedDay/Title/Title.styled.jsx","components/Calendar/ChoosedDay/Title/Title.jsx","components/Calendar/ChoosedDay/Tasks/Tasks.styled.jsx","components/Calendar/ChoosedDay/PopUpReplace/PopUpReplace.styled.jsx","components/Calendar/ChoosedDay/PopUpReplace/PopUpReplace.jsx","components/Calendar/ChoosedDay/Tasks/Tasks.jsx","components/Calendar/ChoosedDay/Head/Head.styled.jsx","components/Calendar/ChoosedDay/Head/Head.jsx","components/Calendar/ChoosedDay/ChoosedDay.jsx","helpers/setDay.js"],"sourcesContent":["import styled from '@emotion/styled';\nimport { desktop, min, tablet } from 'styles/media';\n\nexport const ContainerMain = styled.div`\n  display: flex;\n  gap: 30px;\n  overflow-x: auto;\n  overflow-y: hidden;\n  height: 432px;\n  scroll-snap-type: x mandatory;\n\n  ${min(tablet)} {\n    height: 568px;\n    gap: 16px;\n  }\n  ${min(desktop)} {\n    gap: 27px;\n  }\n  /* width*/\n  &::-webkit-scrollbar {\n    width: 12px;\n  }\n\n  /* Track */\n  &::-webkit-scrollbar-track {\n    background: var(--task-scrollbar-track);\n    border-radius: 12px;\n  }\n\n  /* Handle */\n  &::-webkit-scrollbar-thumb {\n    background: var(--task-scrollbar-thumb);\n    border-radius: 12px;\n  }\n\n  /* Handle on hover */\n  &::-webkit-scrollbar-thumb:hover {\n    background: var(--task-scrollbar-thumb-hover);\n  }\n`;\n\nexport const ContainerSecond = styled.div`\n  display: flex;\n  flex-direction: column;\n  max-height: 100%;\n  position: relative;\n  background-color: var(--primary-bg-color);\n  border: 1px solid var(--calendar-grid-border);\n  border-radius: 8px;\n  scroll-snap-align: start;\n`;\n\nexport const ContainerButtonAddTask = styled.div`\n  border-radius: 8px;\n  padding: 0 20px 20px 20px;\n  ${min(tablet)} {\n    padding: 0 18px 18px 18px;\n  }\n`;\n\nexport const ButtonAddTask = styled.button`\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 8px;\n  width: 100%;\n  background-color: var(--add-task-bg);\n  border: 1px dashed var(--accent-color);\n  border-radius: 8px;\n  padding: 12px 0;\n`;\n\nexport const IconButtonAddTask = styled.svg`\n  width: 24px;\n  height: 24px;\n  stroke: var(--primary-text-color);\n  & use {\n    fill: transparent;\n  }\n`;\n\nexport const ButtonAddTaskText = styled.span`\n  font-size: 14px;\n  font-weight: 600;\n  line-height: 18px;\n  color: var(--primary-text-color);\n`;\n","import styled from '@emotion/styled';\nimport { min, tablet } from 'styles/media';\n\nexport const ContainerTitle = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 18px 18px 0;\n  margin-bottom: 24px;\n  ${min(tablet)} {\n    margin-bottom: 28px;\n    padding: 20px 20px 0;\n  }\n`;\n\nexport const MainTitle = styled.h2`\n  font-size: 18px;\n  font-weight: 700;\n  line-height: 20px;\n  margin: 0;\n\n  color: var(--primary-text-color);\n  ${min(tablet)} {\n    font-size: 20px;\n    line-height: 24px;\n  }\n`;\n\nexport const IconAddTask = styled.svg`\n  height: 22px;\n  width: 22px;\n  stroke: var(--primary-text-color);\n  cursor: pointer;\n  & use {\n    fill: transparent;\n  }\n  ${min(tablet)} {\n    height: 24px;\n    width: 24px;\n  }\n`;\n","import React from 'react';\nimport { ContainerTitle, IconAddTask, MainTitle } from './Title.styled';\nimport sprite from '../../../../assets/images/icons/icons.svg';\n\nconst Title = ({ type, onAdd }) => {\n  return (\n    <ContainerTitle>\n      <MainTitle>\n        {(() => {\n          switch (type) {\n            case 'to-do':\n              return 'To do';\n\n            case 'in-progress':\n              return 'In progress';\n            case 'done':\n              return 'Done';\n\n            default:\n              return;\n          }\n        })()}\n      </MainTitle>\n      <IconAddTask onClick={onAdd}>\n        <use xlinkHref={sprite + '#icon-icon-plus'} />\n      </IconAddTask>\n    </ContainerTitle>\n  );\n};\n\nexport default Title;\n","import styled from '@emotion/styled';\nimport { desktop, min, tablet } from 'styles/media';\n\nexport const ListTasks = styled.ul`\n  padding: 0 6px 0 18px;\n  margin-right: 6px;\n  overflow-x: hidden;\n  overflow-y: auto;\n  display: flex;\n  flex-direction: column;\n  gap: 14px;\n  width: 328px;\n\n  & li:nth-last-child(-n + 1) {\n    margin-bottom: 32px;\n  }\n  ${min(tablet)} {\n    width: 334px;\n    gap: 18px;\n    padding: 0 8px 0 20px;\n    margin-right: 8px;\n    &::-webkit-scrollbar {\n      width: 8px;\n    }\n  }\n  ${min(desktop)} {\n    width: 313px;\n  }\n  /* width*/\n  &::-webkit-scrollbar {\n    width: 6px;\n  }\n\n  /* Track */\n  &::-webkit-scrollbar-track {\n    background: var(--task-scrollbar-track);\n    border-radius: 12px;\n  }\n\n  /* Handle */\n  &::-webkit-scrollbar-thumb {\n    background: var(--task-scrollbar-thumb);\n    border-radius: 12px;\n  }\n\n  /* Handle on hover */\n  &::-webkit-scrollbar-thumb:hover {\n    background: var(--task-scrollbar-thumb-hover);\n  }\n`;\n\nexport const Task = styled.li`\n  position: relative;\n  background-color: var(--page-bg-color);\n  padding: 14px 14px 18px 14px;\n  border: 1px solid var(--calendar-grid-border);\n\n  border-radius: 8px;\n`;\n\nexport const TaskTitle = styled.h3`\n  font-size: 14px;\n  font-weight: 500;\n  color: var(--primary-text-color);\n\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  margin-bottom: 28px;\n`;\n\nexport const ContainerButtonsTask = styled.div`\n  display: flex;\n  align-items: end;\n`;\n\nexport const TaskImage = styled.img`\n  width: 32px;\n  height: 32px;\n  border: 1.8px solid var(--accent-color);\n  border-radius: 50%;\n  margin-right: 8px;\n`;\nexport const TaskImagePlug = styled.svg`\n  width: 32px;\n  height: 32px;\n  border: 1.8px solid var(--accent-color);\n  border-radius: 50%;\n  margin-right: 8px;\n  fill: #3e85f32e;\n  .dark & {\n    fill: #ffffff2e;\n  }\n`;\n\nexport const TaskButtonPriority = styled.button`\n  height: 20px;\n  font-size: 10px;\n  font-weight: 600;\n  line-height: 12px;\n  color: var(--task-priority-color);\n  padding: 4px 12px;\n  background-color: ${({ priority }) => {\n    switch (priority) {\n      case 'low':\n        return 'var(--task-priority-low-bg)';\n      case 'medium':\n        return 'var(--task-priority-medium-bg)';\n      case 'high':\n        return 'var(--task-priority-high-bg)';\n\n      default:\n        return;\n    }\n  }};\n  border: none;\n  border-radius: 4px;\n`;\n\nexport const ContainerIcons = styled.div`\n  display: flex;\n  gap: 10px;\n  margin-left: auto;\n`;\n\nexport const IconTask = styled.svg`\n  height: 14px;\n  width: 14px;\n  stroke: var(--primary-text-color);\n  cursor: pointer;\n  & use {\n    fill: transparent;\n  }\n  ${min(tablet)} {\n    height: 16px;\n    width: 16px;\n  }\n`;\n","import styled from '@emotion/styled';\n\nexport const ContainerReplaceTask = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 14px;\n  background-color: var(--task-popup-bg);\n  padding: 14px;\n  border-radius: 8px;\n  position: absolute;\n  z-index: 2;\n  margin-top: 12px;\n  right: -10px;\n  box-shadow: 0px 4px 16px 0px #1111111a;\n`;\n\nexport const ReplaceTaskContainerText = styled.div`\n  display: flex;\n  justify-content: space-between;\n  gap: 8px;\n  white-space: nowrap;\n\n  cursor: pointer;\n`;\n\nexport const ReplaceTaskText = styled.span`\n  font-size: 12px;\n  font-weight: 500;\n  line-height: 14px;\n  color: var(--task-popup-color-text);\n`;\n","import React, { useEffect } from 'react';\n\nimport sprite from '../../../../assets/images/icons/icons.svg';\nimport {\n  ContainerReplaceTask,\n  ReplaceTaskContainerText,\n  ReplaceTaskText,\n} from './PopUpReplace.styled';\nimport { useDispatch } from 'react-redux';\nimport { updateTaskOperation } from 'redux/tasks/operations';\nimport { IconTask } from '../Tasks/Tasks.styled';\nimport { Notify } from 'notiflix';\n\nconst PopUpReplace = ({\n  type,\n  tasks,\n  setTasks,\n  setIsShowPopUpReplace,\n  _id,\n}) => {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    const onClickClose = ({ target }) => {\n      console.log(target.id);\n      if (target.id !== 'togglePopUp') {\n        setIsShowPopUpReplace(false);\n      }\n    };\n    const onEscClose = ({ code }) => {\n      if (code === 'Escape') {\n        setIsShowPopUpReplace(false);\n      }\n    };\n\n    document.addEventListener('click', onClickClose);\n    document.addEventListener('keydown', onEscClose);\n\n    return () => {\n      document.removeEventListener('click', onClickClose);\n      document.removeEventListener('keydown', onEscClose);\n    };\n  }, [setIsShowPopUpReplace]);\n\n  const viewCategories = type => {\n    let arrCategories = [];\n    switch (type) {\n      case 'to-do':\n        arrCategories = [\n          {\n            id: 1,\n            typeCategory: 'In progress',\n            typeForOnClick: 'in-progress',\n          },\n          { id: 2, typeCategory: 'Done', typeForOnClick: 'done' },\n        ];\n        break;\n\n      case 'in-progress':\n        arrCategories = [\n          { id: 1, typeCategory: 'To Do', typeForOnClick: 'to-do' },\n          { id: 2, typeCategory: 'Done', typeForOnClick: 'done' },\n        ];\n        break;\n      case 'done':\n        arrCategories = [\n          { id: 1, typeCategory: 'To Do', typeForOnClick: 'to-do' },\n          {\n            id: 2,\n            typeCategory: 'In progress',\n            typeForOnClick: 'in-progress',\n          },\n        ];\n        break;\n\n      default:\n        break;\n    }\n    return arrCategories;\n  };\n\n  const onReplace = async (id, typeCategory) => {\n    const response = await dispatch(\n      updateTaskOperation({\n        taskId: id,\n        updateTaskData: { category: typeCategory },\n      })\n    );\n\n    if (response.payload.status) {\n      Notify.failure('Task don`t replace. Try again');\n      return;\n    }\n\n    const filteredTasks = tasks\n      ? tasks.map(task => {\n          if (task._id === id) {\n            return { ...task, category: typeCategory };\n          }\n          return task;\n        })\n      : [];\n\n    setTasks(filteredTasks);\n\n    // setIsShowPopUpReplace(false);\n  };\n  return (\n    <ContainerReplaceTask>\n      {viewCategories(type).map(({ id, typeCategory, typeForOnClick }) => (\n        <ReplaceTaskContainerText\n          key={id}\n          onClick={() => onReplace(_id, typeForOnClick)}\n        >\n          <ReplaceTaskText>{typeCategory}</ReplaceTaskText>\n          <IconTask>\n            <use xlinkHref={sprite + '#icon-arrow-circle-broken-right'} />\n          </IconTask>\n        </ReplaceTaskContainerText>\n      ))}\n    </ContainerReplaceTask>\n  );\n};\n\nexport default PopUpReplace;\n","import React, { useState } from 'react';\nimport {\n  ContainerButtonsTask,\n  ContainerIcons,\n  IconTask,\n  ListTasks,\n  Task,\n  TaskButtonPriority,\n  TaskImage,\n  TaskImagePlug,\n  TaskTitle,\n} from './Tasks.styled';\nimport PopUpReplace from '../PopUpReplace/PopUpReplace';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteTaskOperation } from 'redux/tasks/operations';\n\nimport sprite from '../../../../assets/images/icons/icons.svg';\nimport { selectUserAvatar } from 'redux/auth/selectors';\nimport { Notify } from 'notiflix';\n\nconst Tasks = ({ type, tasks, setTasks }) => {\n  const dispatch = useDispatch();\n  const [isShowPopUpReplace, setIsShowPopUpReplace] = useState(false);\n  const avatarURL = useSelector(selectUserAvatar);\n\n  const toggleShowPopUpReplace = id => {\n    isShowPopUpReplace === id\n      ? setIsShowPopUpReplace(false)\n      : setIsShowPopUpReplace(id);\n  };\n\n  const onEdit = () => {\n    console.log('onEdit');\n  };\n  const onDelete = async taskId => {\n    const response = await dispatch(deleteTaskOperation(taskId));\n    if (response.payload.status) {\n      Notify.failure('Task don`t delete. Try again');\n      return;\n    }\n    const filteredTasks = tasks\n      ? tasks.filter(({ _id }) => _id !== taskId)\n      : [];\n    setTasks(filteredTasks);\n    Notify.success('Task deleted successfully');\n  };\n  return (\n    <ListTasks>\n      {tasks.map(\n        ({ _id, title, start, end, priority, date, category, owner }) => {\n          if (type !== category) {\n            return '';\n          }\n          return (\n            <Task key={_id}>\n              <TaskTitle>{title}</TaskTitle>\n              <ContainerButtonsTask>\n                {avatarURL ? (\n                  <TaskImage src={avatarURL} alt=\"User avatar\" />\n                ) : (\n                  <TaskImagePlug>\n                    <use href={`${sprite}#icon-ph_user`}></use>\n                  </TaskImagePlug>\n                )}\n                <TaskButtonPriority priority={priority}>\n                  {priority.charAt(0).toUpperCase() + priority.slice(1)}\n                </TaskButtonPriority>\n                <ContainerIcons>\n                  <IconTask\n                    id=\"togglePopUp\"\n                    onClick={() => toggleShowPopUpReplace(_id)}\n                  >\n                    <use\n                      id=\"togglePopUp\"\n                      xlinkHref={sprite + '#icon-arrow-circle-broken-right'}\n                    />\n                  </IconTask>\n                  <IconTask onClick={onEdit}>\n                    <use xlinkHref={sprite + '#icon-pencil'} />\n                  </IconTask>\n                  <IconTask onClick={() => onDelete(_id)}>\n                    <use xlinkHref={sprite + '#icon-trash'} />\n                  </IconTask>\n                </ContainerIcons>\n              </ContainerButtonsTask>\n              {isShowPopUpReplace === _id && (\n                <PopUpReplace\n                  type={type}\n                  tasks={tasks}\n                  setTasks={setTasks}\n                  setIsShowPopUpReplace={setIsShowPopUpReplace}\n                  _id={_id}\n                ></PopUpReplace>\n              )}\n            </Task>\n          );\n        }\n      )}\n    </ListTasks>\n  );\n};\n\nexport default Tasks;\n","import styled from '@emotion/styled';\n\nexport const HeadContainer = styled.div`\n  display: grid;\n  grid-template-columns: repeat(7, 1fr);\n  justify-content: center;\n  text-align: center;\n  align-items: center;\n  border: 1px solid var(--calendar-grid-border);\n  border-radius: 8px;\n  margin-bottom: 14px;\n  overflow: hidden;\n\n  & div:nth-of-type(${({ isSelected }) => isSelected + 1}) {\n    & div {\n      color: #ffffff;\n      background-color: #3e85f3;\n      border-radius: 6px;\n    }\n  }\n`;\n\nexport const HeadCell = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 6px;\n  justify-content: center;\n  align-items: center;\n  text-align: center;\n  text-transform: uppercase;\n  background-color: var(--cell-background);\n\n  & div {\n    color: #343434;\n    /* opacity: 0; */\n    background-color: var(--cell-background);\n\n    border-radius: 6px;\n    transition: all cubic-bezier(0.165, 0.84, 0.44, 1) 0.2s;\n  }\n\n  padding: 16px 0;\n  cursor: pointer;\n  &:hover {\n    & div {\n      opacity: 1;\n      color: #ffffff;\n      background-color: #3e85f3;\n    }\n  }\n`;\n\nexport const NameWeek = styled.span`\n  font-size: 16px;\n  font-weight: 600;\n`;\n\nexport const DayWeekContainer = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 12px;\n  font-weight: 700;\n  width: 20px;\n  height: 22px;\n  /* text-align: center; */\n`;\nexport const DayWeekText = styled.span``;\n","import { useMediaQuery } from 'react-responsive';\nimport moment from 'moment';\nimport {\n  DayWeekContainer,\n  DayWeekText,\n  HeadCell,\n  HeadContainer,\n  NameWeek,\n} from './Head.styled';\nimport { useEffect, useState } from 'react';\nimport { useNavigate, useParams } from 'react-router';\nimport { setDay } from 'helpers/setDay';\n\nconst Head = () => {\n  const isMobile = useMediaQuery({ maxWidth: 767 });\n  const [isSelected, setIsSelected] = useState('');\n\n  const { currentDay } = useParams();\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const currentDaySlice = currentDay.split('-').slice(2).join('');\n    [...Array(7)].map((_, idx) => {\n      const dayIdx = setDay(currentDay)\n        .startWeek.day(idx + 1)\n        .format('DD');\n      if (dayIdx === currentDaySlice) {\n        setIsSelected(idx);\n      }\n      return null;\n    });\n  }, [currentDay]);\n\n  const onChangeDay = date => {\n    const formatDate = date.format('YYYY-MM-DD');\n    localStorage.setItem('date', formatDate);\n    navigate('../', { relative: `${formatDate}` });\n  };\n\n  return (\n    <HeadContainer isSelected={isSelected}>\n      {[...Array(7)].map((_, idx) => (\n        <HeadCell onClick={() => onChangeDay(moment().day(idx + 1))} key={idx}>\n          <NameWeek>\n            {isMobile\n              ? moment()\n                  .day(idx + 1)\n                  .format('ddd')\n                  .charAt(0)\n              : moment()\n                  .day(idx + 1)\n                  .format('ddd')}\n          </NameWeek>\n          <DayWeekContainer>\n            <DayWeekText>\n              {setDay(currentDay)\n                .startWeek.day(idx + 1)\n                .format('D')}\n            </DayWeekText>\n          </DayWeekContainer>\n        </HeadCell>\n      ))}\n    </HeadContainer>\n  );\n};\n\nexport default Head;\n","import {\n  ButtonAddTask,\n  ButtonAddTaskText,\n  ContainerButtonAddTask,\n  ContainerMain,\n  ContainerSecond,\n  IconButtonAddTask,\n} from './ChoosedDay.styled';\n\nimport sprite from '../../../assets/images/icons/icons.svg';\nimport Title from './Title/Title';\nimport Tasks from './Tasks/Tasks';\nimport { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { fetchTasksOperation } from 'redux/tasks/operations';\nimport { useParams } from 'react-router-dom';\nimport Head from './Head/Head';\n\nconst categories = [\n  { id: 1, type: 'to-do' },\n  { id: 2, type: 'in-progress' },\n  { id: 3, type: 'done' },\n];\n\nconst ChoosedDay = () => {\n  const [tasks, setTasks] = useState([]);\n  const { currentDay } = useParams();\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    (async () => {\n      const formatedDate = currentDay.split('-').slice(0, 2).join('-');\n\n      const { payload } = await dispatch(fetchTasksOperation(formatedDate));\n\n      const filteredTasks = payload\n        ? payload.filter(({ date }) => date === currentDay)\n        : [];\n      setTasks(filteredTasks);\n    })();\n    return () => {\n      setTasks([]);\n    };\n  }, [currentDay, dispatch]);\n\n  // useEffect(() => {\n  //   const onClickBody = ({ target }) => {\n  //     console.dir(target);\n  //     if (target.tagName !== 'use') {\n  //       setIsShowPopUpReplace(false);\n  //       return;\n  //     }\n  //   };\n  //   const body = document.querySelector('body');\n\n  //   if (isShowPopUpReplace) {\n  //     body.addEventListener('click', onClickBody);\n  //   } else {\n  //     body.removeEventListener('click', onClickBody);\n  //   }\n  // }, [isShowPopUpReplace]);\n\n  const onAdd = category => {\n    console.log('onAdd', category);\n  };\n\n  return (\n    <>\n      <Head />\n      <ContainerMain>\n        {categories.map(({ id, type }) => (\n          <ContainerSecond key={id}>\n            <Title type={type} onAdd={onAdd} />\n            <Tasks type={type} tasks={tasks} setTasks={setTasks} />\n            <ContainerButtonAddTask>\n              <ButtonAddTask onClick={onAdd}>\n                <IconButtonAddTask>\n                  <use xlinkHref={sprite + '#icon-plus'} />\n                </IconButtonAddTask>\n                <ButtonAddTaskText>Add task</ButtonAddTaskText>\n              </ButtonAddTask>\n            </ContainerButtonAddTask>\n          </ContainerSecond>\n        ))}\n      </ContainerMain>\n    </>\n  );\n};\n\nexport default ChoosedDay;\n","import moment from 'moment';\n\nexport const setDay = day => {\n  moment.updateLocale('en', { week: { dow: 1 } });\n  let currentDay;\n  if (!day) {\n    currentDay = moment();\n  } else {\n    currentDay = moment(day).clone();\n  }\n  const startMonth = currentDay.clone().startOf('month'); // початок поточного місяця\n  const endMonth = currentDay.clone().endOf('month'); // кінець поточного місяця\n\n  const startDay = startMonth.clone().startOf('week'); // перший день тижня, в якому починається поточний місяць\n  const endDay = endMonth.clone().endOf('week'); // останній день тижня, в якому закінчується поточний місяць\n\n  const startWeek = currentDay.clone().startOf('week'); // перший день тижня, якому знаходиться обрана дата\n  const endWeek = currentDay.clone().endOf('week'); // останній  день тижня, якому знаходиться обрана дата\n\n  const dayDifference = endDay.diff(startDay, 'days') + 1; // кількість днів, що відображаються на календарі (ячейки)\n  const weeks = dayDifference / 7; //кількість тижнів в місяці (рядки)\n\n  const startCalendar = startDay.clone().subtract(1, 'day');\n  const daysArray = [...Array(dayDifference)].map(() =>\n    startCalendar.add(1, 'day').clone()\n  );\n\n  const dates = {\n    startMonth,\n    endMonth,\n    startDay,\n    endDay,\n    startWeek,\n    endWeek,\n    dayDifference,\n    weeks,\n    daysArray,\n  };\n  return dates;\n};\n"],"names":["ContainerMain","styled","min","tablet","desktop","ContainerSecond","ContainerButtonAddTask","ButtonAddTask","IconButtonAddTask","ButtonAddTaskText","ContainerTitle","MainTitle","IconAddTask","type","onAdd","onClick","xlinkHref","sprite","ListTasks","Task","TaskTitle","ContainerButtonsTask","TaskImage","TaskImagePlug","TaskButtonPriority","priority","ContainerIcons","IconTask","ContainerReplaceTask","ReplaceTaskContainerText","ReplaceTaskText","tasks","setTasks","setIsShowPopUpReplace","_id","dispatch","useDispatch","useEffect","onClickClose","target","console","log","id","onEscClose","code","document","addEventListener","removeEventListener","onReplace","typeCategory","updateTaskOperation","taskId","updateTaskData","category","payload","status","Notify","filteredTasks","map","task","arrCategories","typeForOnClick","viewCategories","useState","isShowPopUpReplace","avatarURL","useSelector","selectUserAvatar","onEdit","onDelete","deleteTaskOperation","filter","title","start","end","date","owner","src","alt","href","charAt","toUpperCase","slice","HeadContainer","isSelected","HeadCell","NameWeek","DayWeekContainer","DayWeekText","isMobile","useMediaQuery","maxWidth","setIsSelected","currentDay","useParams","navigate","useNavigate","currentDaySlice","split","join","Array","_","idx","setDay","startWeek","day","format","formatDate","localStorage","setItem","relative","onChangeDay","moment","categories","formatedDate","fetchTasksOperation","week","dow","startMonth","clone","startOf","endMonth","endOf","startDay","endDay","endWeek","dayDifference","diff","weeks","startCalendar","subtract","daysArray","add"],"sourceRoot":""}