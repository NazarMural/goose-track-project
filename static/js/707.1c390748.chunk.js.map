{"version":3,"file":"static/js/707.1c390748.chunk.js","mappings":"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","sources":["components/MainContainer/MainContainer.styled.jsx","components/MainContainer/MainContainer.jsx","components/Calendar/CalendarToolbar/CalendarToolbar.styled.jsx","components/Calendar/CalendarToolbar/ChangeDate/ChangeDate.styled.jsx","components/Calendar/CalendarToolbar/ChangeDate/ChangeDate.jsx","components/Calendar/CalendarToolbar/CalendarToolbar.jsx","pages/CalendarPage.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { desktop, min, tablet } from 'styles/media';\n\nexport const Main = styled.main`\n  background-color: var(--page-bg-color);\n  padding-top: 64px;\n  padding-bottom: 40px;\n\n  ${min(tablet)} {\n    padding-bottom: 38px;\n  }\n\n  ${min(desktop)} {\n    padding-top: 38px;\n    padding-bottom: 32px;\n  }\n`;\n\nexport const Container = styled.div`\n  padding: 0 20px;\n\n  ${min(tablet)} {\n    padding: 0 32px;\n  }\n`;\n","import { Container, Main } from './MainContainer.styled';\n\nexport const MainContainer = ({ children }) => {\n  return (\n    <Main>\n      <Container>{children}</Container>\n    </Main>\n  );\n};\n","import styled from '@emotion/styled';\nimport { NavLink } from 'react-router-dom';\nimport { min, mobile, tablet } from 'styles/media';\n\nexport const Toolbar = styled.div`\n  margin-bottom: 24px;\n\n  ${min(tablet)} {\n    display: flex;\n    justify-content: space-between;\n  }\n`;\n\n// export const DateContainer = styled.div`\n//   display: flex;\n//   justify-content: space-between;\n//   margin-bottom: 18px;\n//   gap: 8px;\n// `;\n\n// export const DateWrapper = styled.div`\n//   background-color: var(--accent-color);\n//   width: 150px;\n//   /* width: auto; */\n//   display: flex;\n//   padding: 6px 12px;\n//   justify-content: center;\n//   align-items: center;\n//   border-radius: 8px;\n// `;\n\n// export const Date = styled.span`\n//   text-transform: uppercase;\n//   color: var(--invert-text-color);\n//   font-size: 14px;\n//   font-style: normal;\n//   font-weight: 700;\n//   line-height: 18px;\n// `;\n\n// export const ToggleWrapper = styled.div`\n//   /* padding: 7px 10px; */\n//   display: flex;\n//   background: var(--calendar-grid-border);\n//   border: 1px solid var(--calendar-grid-border);\n//   border-radius: 8px;\n//   gap: 1px;\n//   overflow: hidden;\n// `;\n\n// export const Toggle = styled.div`\n//   padding: 7px 10px;\n//   background: var(--primary-bg-color);\n// `;\n\n// export const ToggleIcon = styled.svg`\n//   fill: var(--chevron-btn-color);\n//   &:hover {\n//     fill: var(--accent-color);\n//   }\n// `;\n\nexport const TypeWrapper = styled.div`\n  display: flex;\n  border-radius: 8px;\n  overflow: hidden;\n  height: 34px;\n\n  ${min(mobile)} {\n    max-width: 152px;\n  }\n`;\n\nexport const TypeLink = styled(NavLink)`\n  text-decoration: none;\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 500;\n  line-height: 18px;\n  color: var(--switch-type-color);\n  width: 76px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 8px 0;\n  background-color: var(--switch-type-bg);\n\n  &.active {\n    color: var(--switch-type-color-active);\n    background-color: var(--switch-type-bg-active);\n  }\n`;\n","import styled from '@emotion/styled';\n\nexport const DateContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 18px;\n  gap: 8px;\n`;\n\nexport const DateWrapper = styled.div`\n  background-color: var(--accent-color);\n  width: 150px;\n  display: flex;\n  padding: 6px 12px;\n  justify-content: center;\n  align-items: center;\n  border-radius: 8px;\n`;\n\nexport const Date = styled.span`\n  text-transform: uppercase;\n  color: var(--invert-text-color);\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 700;\n  line-height: 18px;\n`;\n\nexport const ToggleWrapper = styled.div`\n  display: flex;\n  background: var(--calendar-grid-border);\n  border: 1px solid var(--calendar-grid-border);\n  border-radius: 8px;\n  gap: 1px;\n  overflow: hidden;\n  cursor: pointer;\n`;\n\nexport const Toggle = styled.div`\n  padding: 7px 10px;\n  background: var(--primary-bg-color);\n`;\n\nexport const ToggleIcon = styled.svg`\n  fill: var(--chevron-btn-color);\n  &:hover {\n    fill: var(--accent-color);\n  }\n`;\n","import { useNavigate, useParams } from 'react-router';\nimport sprite from 'assets/images/icons/icons.svg';\nimport moment from 'moment';\nimport { Date, DateContainer, DateWrapper, Toggle, ToggleIcon, ToggleWrapper } from './ChangeDate.styled';\n\nconst ChangeDate = () => {\n  const params = useParams();\n  const navigate = useNavigate();\n\n  let paramsType;\n  let paramsDate;\n\n  if (params.currentDay) {\n    paramsType = 'day';\n    paramsDate = params.currentDay;\n    localStorage.setItem('type', 'day');\n  }\n  if (params.currentMonth) {\n    paramsType = 'month';\n    paramsDate = params.currentMonth;\n    localStorage.setItem('type', 'month');\n  }\n\n  const handleClick = () => {\n    const date = moment(paramsDate).add(1, paramsType).format('YYYY-MM-DD');\n\n    localStorage.setItem('date', date);\n    const month = moment(date).format('YYYY-MM');\n    const day = moment(date).format('YYYY-MM-DD');\n    navigate(paramsType === 'month' ? `month/${month}` : `day/${day}`);\n  };\n\n  const handleClickBack = () => {\n    const date = moment(paramsDate)\n      .subtract(1, paramsType)\n      .format('YYYY-MM-DD');\n    localStorage.setItem('date', date);\n    const month = moment(date).format('YYYY-MM');\n    navigate(paramsType === 'month' ? `month/${month}` : `day/${date}`);\n  };\n\n  return (\n    <DateContainer>\n      <DateWrapper>\n        <Date>\n          {moment(paramsDate).format(\n            paramsType === 'day' ? 'DD MMM YYYY' : 'MMMM YYYY'\n          )}\n        </Date>\n      </DateWrapper>\n      <ToggleWrapper>\n        <div onClick={handleClickBack}>\n          <Toggle>\n            <ToggleIcon width=\"16\" height=\"16\">\n              <use\n                xlinkHref={`${sprite}#icon-chevron-left`}\n                width={16}\n                height={16}\n              />\n            </ToggleIcon>\n          </Toggle>\n        </div>\n        <div onClick={handleClick}>\n          <Toggle>\n            <ToggleIcon width=\"16\" height=\"16\">\n              <use\n                xlinkHref={`${sprite}#icon-chevron-right`}\n                width={16}\n                height={16}\n              />\n            </ToggleIcon>\n          </Toggle>\n        </div>\n      </ToggleWrapper>\n    </DateContainer>\n  );\n};\n\nexport default ChangeDate;\n","import moment from 'moment';\nimport { useEffect, useState } from 'react';\n\nimport { Toolbar, TypeWrapper, TypeLink } from './CalendarToolbar.styled';\nimport ChangeDate from './ChangeDate/ChangeDate';\nimport { useParams } from 'react-router';\n\nconst CalendarToolbar = () => {\n  const [currentDate, setCurrentDate] = useState('');\n  const [format, setFormat] = useState('');\n\n  const month = moment(currentDate).format('YYYY-MM');\n  const day = moment(currentDate).format('YYYY-MM-DD');\n  const typeMonth = document.querySelector('#data-type-month');\n  const typeDay = document.querySelector('#data-type-day');\n  const params = useParams();\n\n  useEffect(() => {\n    const storedDate = localStorage.getItem('date');\n    const storedType = localStorage.getItem('type');\n\n    if (storedDate) {\n      setCurrentDate(storedDate);\n    } else {\n      setCurrentDate(moment().format('YYYY-MM-DD'));\n    }\n\n    if (storedType) {\n      setFormat(storedType);\n    } else {\n      setFormat('month');\n    }\n  }, []);\n\n  useEffect(() => {\n    if (params.currentDay) {\n      typeDay?.classList.add('active');\n      typeMonth?.classList.remove('active');\n    }\n    if (params.currentMonth) {\n      typeMonth?.classList.add('active');\n      typeDay?.classList.remove('active');\n    }\n  });\n\n  const handleChangeType = e => {\n    switch (e.currentTarget.textContent) {\n      case 'Month':\n        setFormat('month');\n        localStorage.setItem('type', 'month');\n        break;\n      case 'Day':\n        setFormat('day');\n        localStorage.setItem('type', 'day');\n        break;\n      default:\n        return format;\n    }\n  };\n\n  return (\n    <Toolbar>\n      <ChangeDate />\n      <TypeWrapper>\n        <TypeLink\n          to={`month/${month}`}\n          onClick={handleChangeType}\n          id=\"data-type-month\"\n        >\n          Month\n        </TypeLink>\n        <TypeLink\n          to={`day/${day}`}\n          onClick={handleChangeType}\n          id=\"data-type-day\"\n        >\n          Day\n        </TypeLink>\n      </TypeWrapper>\n    </Toolbar>\n  );\n};\n\nexport default CalendarToolbar;\n","import React, { useEffect } from 'react';\nimport { MainContainer } from 'components/MainContainer/MainContainer';\nimport CalendarToolbar from 'components/Calendar/CalendarToolbar/CalendarToolbar';\nimport { Outlet, useNavigate } from 'react-router';\nimport moment from 'moment';\n\nconst CalendarPage = () => {\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const month = moment().format('YYYY-MM').toString();\n    navigate(`/calendar/month/${month}`);\n  }, [navigate]);\n\n  const format = localStorage.getItem('type') || 'month';\n  useEffect(() => {\n    const date =\n      localStorage.getItem('date') || moment().format('YYYY-MM-DD').toString();\n\n    const month = date.slice(0, -3);\n\n    if (format === 'month') {\n      navigate(`/calendar/month/${month}`);\n    } else {\n      navigate(`/calendar/day/${date}`);\n    }\n\n    localStorage.setItem('date', date);\n    localStorage.setItem('type', format);\n  }, [navigate, format]);\n\n  return (\n    <MainContainer>\n      <CalendarToolbar />\n      <Outlet />\n    </MainContainer>\n  );\n};\n\nexport default CalendarPage;\n"],"names":["Main","styled","min","tablet","desktop","Container","MainContainer","children","Toolbar","TypeWrapper","mobile","TypeLink","NavLink","DateContainer","DateWrapper","Date","ToggleWrapper","Toggle","ToggleIcon","paramsType","paramsDate","params","useParams","navigate","useNavigate","currentDay","localStorage","setItem","currentMonth","moment","format","onClick","date","subtract","month","width","height","xlinkHref","sprite","add","day","useState","currentDate","setCurrentDate","setFormat","typeMonth","document","querySelector","typeDay","useEffect","storedDate","getItem","storedType","classList","remove","handleChangeType","e","currentTarget","textContent","to","id","toString","slice"],"sourceRoot":""}