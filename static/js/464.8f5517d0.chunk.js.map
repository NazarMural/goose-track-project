{"version":3,"file":"static/js/464.8f5517d0.chunk.js","mappings":"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","sources":["components/Calendar/ChoosedDay/ChoosedDay.styled.jsx","components/Calendar/ChoosedDay/ChoosedDay.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { desktop, min, tablet } from 'styles/media';\n\nexport const ContainerMain = styled.div`\n  display: flex;\n  gap: 30px;\n  overflow-x: auto;\n  overflow-y: hidden;\n  height: 432px;\n  scroll-snap-type: x mandatory;\n\n  ${min(tablet)} {\n    height: 568px;\n    gap: 16px;\n  }\n  ${min(desktop)} {\n    gap: 0;\n    justify-content: space-between;\n    max-width: 1087px;\n  }\n  /* width*/\n  &::-webkit-scrollbar {\n    width: 12px;\n  }\n\n  /* Track */\n  &::-webkit-scrollbar-track {\n    background: var(--task-scrollbar-track);\n    border-radius: 12px;\n  }\n\n  /* Handle */\n  &::-webkit-scrollbar-thumb {\n    background: var(--task-scrollbar-thumb);\n    border-radius: 12px;\n  }\n\n  /* Handle on hover */\n  &::-webkit-scrollbar-thumb:hover {\n    background: var(--task-scrollbar-thumb-hover);\n  }\n`;\n\nexport const ContainerSecond = styled.div`\n  position: relative;\n  padding: 18px;\n  width: 296px;\n  background-color: var(--primary-bg-color);\n  border: 1px solid var(--calendar-grid-border);\n  border-radius: 8px;\n  scroll-snap-align: start;\n\n  ${min(tablet)} {\n    width: 299px;\n    padding: 20px;\n  }\n  ${min(desktop)} {\n    width: 306px;\n  }\n`;\n\nexport const ContainerTitle = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 24px;\n  ${min(tablet)} {\n    margin-bottom: 28px;\n  }\n`;\n\nexport const Title = styled.h2`\n  font-size: 18px;\n  font-weight: 700;\n  line-height: 20px;\n  margin: 0;\n\n  color: var(--primary-text-color);\n  ${min(tablet)} {\n    font-size: 20px;\n    line-height: 24px;\n  }\n`;\n\nexport const IconAddTask = styled.svg`\n  height: 22px;\n  width: 22px;\n  stroke: var(--primary-text-color);\n  padding: 7px 0;\n  cursor: pointer;\n  & use {\n    fill: transparent;\n  }\n  ${min(tablet)} {\n    height: 24px;\n    width: 24px;\n  }\n`;\n\nexport const ContainerListTasks = styled.div`\n  max-height: 270px;\n  overflow-y: auto;\n  width: 104%;\n  ${min(tablet)} {\n    max-height: 395px;\n  }\n  /* width*/\n  &::-webkit-scrollbar {\n    width: 6px;\n  }\n\n  /* Track */\n  &::-webkit-scrollbar-track {\n    background: var(--task-scrollbar-track);\n    border-radius: 12px;\n  }\n\n  /* Handle */\n  &::-webkit-scrollbar-thumb {\n    background: var(--task-scrollbar-thumb);\n    border-radius: 12px;\n  }\n\n  /* Handle on hover */\n  &::-webkit-scrollbar-thumb:hover {\n    background: var(--task-scrollbar-thumb-hover);\n  }\n`;\n\nexport const ListTasks = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 14px;\n  list-style: none;\n  margin: 0 0 13px 0;\n  padding: 0;\n  width: 296px;\n  ${min(tablet)} {\n    width: 299px;\n    gap: 18px;\n    margin: 0 0 17px 0;\n  }\n  ${min(desktop)} {\n    width: 306px;\n  }\n`;\n\nexport const Task = styled.li`\n  background-color: var(--page-bg-color);\n  padding: 14px 14px 18px 14px;\n  border: 1px solid var(--calendar-grid-border);\n\n  border-radius: 8px;\n`;\n\nexport const TaskTitle = styled.h3`\n  font-size: 14px;\n  font-weight: 500;\n  color: var(--primary-text-color);\n\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  padding: 0;\n  margin: 0 0 28px 0;\n  ${min(tablet)} {\n  }\n  ${min(desktop)} {\n  }\n`;\n\nexport const ContainerButtonsTask = styled.div`\n  display: flex;\n  align-items: end;\n`;\n\nexport const TaskImage = styled.img`\n  box-sizing: border-box;\n  width: 32px;\n  height: 32px;\n  border: 1.8px solid var(--accent-color);\n  border-radius: 50%;\n  margin-right: 8px;\n`;\n\nexport const TaskButtonPriority = styled.button`\n  height: 20px;\n  font-size: 10px;\n  font-weight: 600;\n  line-height: 12px;\n  color: var(--task-priority-color);\n  padding: 4px 12px;\n  background-color: ${({ priority }) => {\n    switch (priority) {\n      case 'low':\n        return 'var(--task-priority-low-bg)';\n      case 'medium':\n        return 'var(--task-priority-medium-bg)';\n      case 'high':\n        return 'var(--task-priority-high-bg)';\n\n      default:\n        return;\n    }\n  }};\n  border: none;\n\n  border-radius: 4px;\n  ${min(tablet)} {\n  }\n  ${min(desktop)} {\n  }\n`;\n\nexport const ContainerIcons = styled.div`\n  position: relative;\n  z-index: 1;\n  display: flex;\n  gap: 10px;\n  margin-left: auto;\n`;\n\nexport const IconTask = styled.svg`\n  height: 14px;\n  width: 14px;\n  stroke: var(--primary-text-color);\n  cursor: pointer;\n  & use {\n    fill: transparent;\n  }\n  ${min(tablet)} {\n    height: 16px;\n    width: 16px;\n  }\n  ${min(desktop)} {\n  }\n`;\n\nexport const ContainerReplaceTask = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 14px;\n  background-color: var(--task-popup-bg);\n  padding: 14px;\n  border-radius: 8px;\n  position: absolute;\n  margin-top: 12px;\n  top: 100%;\n  right: -26%;\n  box-shadow: 0px 4px 16px 0px #1111111a;\n`;\n\nexport const ReplaceTaskContainerText = styled.div`\n  display: flex;\n  justify-content: space-between;\n  gap: 8px;\n  white-space: nowrap;\n\n  cursor: pointer;\n`;\n\nexport const ReplaceTaskText = styled.span`\n  font-size: 12px;\n  font-weight: 500;\n  line-height: 14px;\n  color: var(--task-popup-color-text);\n`;\n\nexport const ContainerButtonAddTask = styled.div`\n  background-color: var(--primary-bg-color);\n  border-radius: 8px;\n  border-bottom-left-radius: 0;\n  border-bottom-right-radius: 0;\n  padding-bottom: 20px;\n`;\n\nexport const ButtonAddTask = styled.button`\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 8px;\n  width: 100%;\n  background-color: var(--add-task-bg);\n  border: 1px dashed var(--accent-color);\n  border-radius: 8px;\n  padding: 12px 0;\n`;\n\nexport const IconButtonAddTask = styled.svg`\n  width: 24px;\n  height: 24px;\n  stroke: var(--primary-text-color);\n  & use {\n    fill: transparent;\n  }\n`;\n\nexport const ButtonAddTaskText = styled.span`\n  font-size: 14px;\n  font-weight: 600;\n  line-height: 18px;\n  color: var(--primary-text-color);\n`;\n","import React, { useEffect, useState } from 'react';\nimport {\n  ButtonAddTask,\n  ButtonAddTaskText,\n  ContainerButtonAddTask,\n  ContainerButtonsTask,\n  ContainerIcons,\n  ContainerListTasks,\n  ContainerMain,\n  ContainerReplaceTask,\n  ContainerSecond,\n  ContainerTitle,\n  IconAddTask,\n  IconButtonAddTask,\n  IconTask,\n  ListTasks,\n  ReplaceTaskContainerText,\n  ReplaceTaskText,\n  Task,\n  TaskButtonPriority,\n  TaskImage,\n  TaskTitle,\n  Title,\n} from './ChoosedDay.styled';\n\nimport sprite from '../../../assets/images/icons/icons.svg';\n\nimport { useDispatch } from 'react-redux';\nimport {\n  deleteTaskOperation,\n  fetchTasksOperation,\n  updateTaskOperation,\n} from 'redux/tasks/operations';\nimport { useParams } from 'react-router-dom';\n\nconst categories = [\n  { id: 1, type: 'to-do' },\n  { id: 2, type: 'in-progress' },\n  { id: 3, type: 'done' },\n];\n\nconst ChoosedDay = () => {\n  const [tasks, setTasks] = useState([]);\n  const [isShowPopUpReplace, setIsShowPopUpReplace] = useState(false);\n  const dispatch = useDispatch();\n\n  const { currentDay } = useParams();\n\n  useEffect(() => {\n    (async () => {\n      const { payload } = await dispatch(fetchTasksOperation());\n      const filteredTasks = payload\n        ? payload.filter(({ date }) => date === currentDay)\n        : [];\n      setTasks(filteredTasks);\n    })();\n  }, [currentDay, dispatch]);\n\n  // useEffect(() => {\n  //   const onClickBody = ({ target }) => {\n  //     console.dir(target);\n  //     if (target.tagName !== 'use') {\n  //       setIsShowPopUpReplace(false);\n  //       return;\n  //     }\n  //   };\n  //   const body = document.querySelector('body');\n\n  //   if (isShowPopUpReplace) {\n  //     body.addEventListener('click', onClickBody);\n  //   } else {\n  //     body.removeEventListener('click', onClickBody);\n  //   }\n  // }, [isShowPopUpReplace]);\n\n  const onDelete = taskId => {\n    dispatch(deleteTaskOperation(taskId));\n    const filteredTasks = tasks\n      ? tasks.filter(({ _id }) => _id !== taskId)\n      : [];\n    setTasks(filteredTasks);\n  };\n\n  const onEdit = () => {\n    console.log('onEdit');\n  };\n\n  const onAdd = category => {\n    console.log('onAdd');\n  };\n\n  const toggleShowPopUpReplace = id => {\n    isShowPopUpReplace === id\n      ? setIsShowPopUpReplace(false)\n      : setIsShowPopUpReplace(id);\n  };\n\n  const onReplace = async (id, typeCategory) => {\n    await dispatch(\n      updateTaskOperation({\n        taskId: id,\n        updateTaskData: { category: typeCategory },\n      })\n    );\n\n    const filteredTasks = tasks\n      ? tasks.map(task => {\n          if (task._id === id) {\n            return { ...task, category: typeCategory };\n          }\n          return task;\n        })\n      : [];\n\n    setTasks(filteredTasks);\n\n    setIsShowPopUpReplace(false);\n  };\n\n  const viewCategories = type => {\n    let arrCategories = [];\n    switch (type) {\n      case 'to-do':\n        arrCategories = [\n          { id: 1, typeCategory: 'In progress', typeForOnClick: 'in-progress' },\n          { id: 2, typeCategory: 'Done', typeForOnClick: 'done' },\n        ];\n        break;\n\n      case 'in-progress':\n        arrCategories = [\n          { id: 1, typeCategory: 'To Do', typeForOnClick: 'to-do' },\n          { id: 2, typeCategory: 'Done', typeForOnClick: 'done' },\n        ];\n        break;\n      case 'done':\n        arrCategories = [\n          { id: 1, typeCategory: 'To Do', typeForOnClick: 'to-do' },\n          { id: 2, typeCategory: 'In progress', typeForOnClick: 'in-progress' },\n        ];\n        break;\n\n      default:\n        break;\n    }\n    return arrCategories;\n  };\n\n  return (\n    <ContainerMain>\n      {categories.map(({ id, type }) => (\n        <ContainerSecond key={id}>\n          <ContainerTitle>\n            <Title>\n              {(() => {\n                switch (type) {\n                  case 'to-do':\n                    return 'To do';\n\n                  case 'in-progress':\n                    return 'In progress';\n                  case 'done':\n                    return 'Done';\n\n                  default:\n                    return;\n                }\n              })()}\n            </Title>\n            <IconAddTask onClick={onAdd}>\n              <use xlinkHref={sprite + '#icon-icon-plus'} />\n            </IconAddTask>\n          </ContainerTitle>\n          <ContainerListTasks>\n            <ListTasks>\n              {tasks.map(\n                ({\n                  _id,\n                  title,\n                  start,\n                  end,\n                  priority,\n                  date,\n                  category,\n                  owner,\n                }) => {\n                  if (type !== category) {\n                    return '';\n                  }\n                  return (\n                    <Task key={_id}>\n                      <TaskTitle>{title}</TaskTitle>\n                      <ContainerButtonsTask>\n                        <TaskImage\n                          src=\"https://www.w3schools.com/howto/img_avatar.png\"\n                          alt=\"#\"\n                        />\n                        <TaskButtonPriority priority={priority}>\n                          {priority.charAt(0).toUpperCase() + priority.slice(1)}\n                        </TaskButtonPriority>\n                        <ContainerIcons>\n                          <IconTask onClick={() => toggleShowPopUpReplace(_id)}>\n                            <use\n                              xlinkHref={\n                                sprite + '#icon-arrow-circle-broken-right'\n                              }\n                            />\n                          </IconTask>\n                          <IconTask onClick={onEdit}>\n                            <use xlinkHref={sprite + '#icon-pencil'} />\n                          </IconTask>\n                          <IconTask onClick={() => onDelete(_id)}>\n                            <use xlinkHref={sprite + '#icon-trash'} />\n                          </IconTask>\n                          {isShowPopUpReplace === _id && (\n                            <ContainerReplaceTask>\n                              {viewCategories(type).map(\n                                ({ id, typeCategory, typeForOnClick }) => (\n                                  <ReplaceTaskContainerText\n                                    key={id}\n                                    onClick={() =>\n                                      onReplace(_id, typeForOnClick)\n                                    }\n                                  >\n                                    <ReplaceTaskText>\n                                      {typeCategory}\n                                    </ReplaceTaskText>\n                                    <IconTask>\n                                      <use\n                                        xlinkHref={\n                                          sprite +\n                                          '#icon-arrow-circle-broken-right'\n                                        }\n                                      />\n                                    </IconTask>\n                                  </ReplaceTaskContainerText>\n                                )\n                              )}\n                            </ContainerReplaceTask>\n                          )}\n                        </ContainerIcons>\n                      </ContainerButtonsTask>\n                    </Task>\n                  );\n                }\n              )}\n            </ListTasks>\n          </ContainerListTasks>\n          <ContainerButtonAddTask>\n            <ButtonAddTask onClick={onAdd}>\n              <IconButtonAddTask>\n                <use xlinkHref={sprite + '#icon-plus'} />\n              </IconButtonAddTask>\n              <ButtonAddTaskText>Add task</ButtonAddTaskText>\n            </ButtonAddTask>\n          </ContainerButtonAddTask>\n        </ContainerSecond>\n      ))}\n    </ContainerMain>\n  );\n};\n\nexport default ChoosedDay;\n"],"names":["ContainerMain","styled","min","tablet","desktop","ContainerSecond","ContainerTitle","Title","IconAddTask","ContainerListTasks","ListTasks","Task","TaskTitle","ContainerButtonsTask","TaskImage","TaskButtonPriority","priority","ContainerIcons","IconTask","ContainerReplaceTask","ReplaceTaskContainerText","ReplaceTaskText","ContainerButtonAddTask","ButtonAddTask","IconButtonAddTask","ButtonAddTaskText","categories","id","type","useState","tasks","setTasks","isShowPopUpReplace","setIsShowPopUpReplace","dispatch","useDispatch","currentDay","useParams","useEffect","fetchTasksOperation","payload","filteredTasks","filter","date","onEdit","console","log","onAdd","category","onReplace","typeCategory","updateTaskOperation","taskId","updateTaskData","map","task","_id","viewCategories","arrCategories","typeForOnClick","onClick","xlinkHref","sprite","title","start","end","owner","src","alt","charAt","toUpperCase","slice","toggleShowPopUpReplace","deleteTaskOperation","onDelete"],"sourceRoot":""}