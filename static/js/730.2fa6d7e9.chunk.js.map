{"version":3,"file":"static/js/730.2fa6d7e9.chunk.js","mappings":"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","sources":["components/Calendar/ChoosedMonth/CalendarTable/CalendarTable.styled.jsx","components/Calendar/ChoosedMonth/TaskList/TaskList.styled.jsx","components/Calendar/ChoosedMonth/TaskList/TaskList.jsx","components/Calendar/ChoosedMonth/CalendarTable/CalendarTable.jsx","components/Calendar/ChoosedMonth/MonthCalendarHead/MonthCalendarHead.styled.jsx","components/Calendar/ChoosedMonth/MonthCalendarHead/MonthCalendarHead.jsx","components/Calendar/ChoosedMonth/ChoosedMonth.styled.jsx","components/Calendar/ChoosedMonth/ChoosedMonth.jsx","components/Modal/Modal.styled.jsx","components/Modal/Modal.jsx","components/TaskModal/TaskForm/TaskForm.styled.jsx","components/TaskModal/TaskForm/TaskForm.jsx","components/TaskModal/TaskModal.jsx","helpers/setDay.js","redux/tasks/selectors.js"],"sourcesContent":["import styled from '@emotion/styled';\n// import { NavLink } from 'react-router-dom';\nimport { desktop, min, tablet } from 'styles/media';\n\nexport const CalendarGrid = styled.div`\n  width: 100%;\n  height: 100%;\n  /* background-color: #dce3e580; */\n  background-color: var(--calendar-grid-border);\n  display: grid;\n  grid-gap: 1px;\n  grid-template-columns: repeat(7, 1fr);\n  grid-template-rows: repeat(${props => props.rows}, 1fr);\n  border: 1px solid var(--calendar-grid-border);\n  border-radius: 8px;\n  overflow: hidden;\n`;\n\nexport const Cell = styled.div`\n  display: flex;\n  flex-direction: column;\n  /* justify-content: flex-end; */\n  /* background-color: #ffffff; */\n  background-color: var(--cell-background);\n  padding: 8px 0;\n  height: 94px;\n\n  ${min(tablet)} {\n    padding: 14px 0;\n    min-height: 144px;\n  }\n\n  ${min(desktop)} {\n    min-height: 125px;\n  }\n`;\n\nexport const WrapperDay = styled.div`\n  display: flex;\n  text-align: end;\n  align-items: center;\n  justify-content: center;\n  align-self: flex-end;\n  height: 22px;\n  width: 22px;\n  text-decoration: none;\n  font-size: 12px;\n  font-weight: 700;\n  margin-bottom: 14px;\n  margin-right: 4px;\n  cursor: pointer;\n\n  ${min(tablet)} {\n    margin-right: 14px;\n  }\n`;\n\nexport const Day = styled.div`\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 4px 6px;\n  border-radius: 6px;\n  color: ${props => props.color};\n  background: ${props => props.background};\n`;\n","import styled from '@emotion/styled';\n// import { NavLink } from 'react-router-dom';\nimport { desktop, min, tablet } from 'styles/media';\n\nexport const List = styled.ul`\n  list-style: none;\n  margin: 0;\n  padding: 0 2px;\n  overflow-y: auto;\n  max-width: 44px;\n  /* width: 100%; */\n  /* max-width: 100%; */\n  height: 65px;\n\n  &::-webkit-scrollbar {\n    width: 8px;\n  }\n\n  &::-webkit-scrollbar-track {\n    background: var(--task-scrollbar-track);\n    border-radius: 12px;\n  }\n\n  &::-webkit-scrollbar-thumb {\n    background: var(--task-scrollbar-thumb);\n    border-radius: 12px;\n  }\n\n  /* Handle on hover */\n  &::-webkit-scrollbar-thumb:hover {\n    background: var(--task-scrollbar-thumb-hover);\n  }\n\n  ${min(tablet)} {\n    max-width: 92px;\n    /* max-width: 100%; */\n    padding: 0 4px;\n  }\n\n  ${min(desktop)} {\n    max-width: 139px;\n  }\n`;\n\nexport const TaskItem = styled.li`\n  background-color: ${props => props.bg};\n  color: ${props => props.color};\n  border-radius: 8px;\n  padding: 4px 8px;\n  /* display: flex; */\n  /* flex-wrap: nowrap; */\n  margin-bottom: 8px;\n  /* max-width: 100%; */\n  /* overflow-x: hidden; */\n  /* white-space: pre-wrap;\n  word-break: break-all;\n  word-wrap: break-word; */\n  max-width: 44px;  \n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  cursor: pointer;\n\n${min(tablet)} {\n    max-width: 92px;\n  }\n\n  ${min(desktop)} {\n    max-width: 139px;\n  } \n`;\n\nexport const TaskLink = styled.p`\n  text-decoration: none;\n  /* color: ${props => props.color}; */\n  color: inherit;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n`;\n","import { useState } from 'react';\nimport moment from 'moment';\n\nimport { List, TaskItem, TaskLink } from './TaskList.styled';\n// import { useNavigate } from 'react-router';\nimport { TaskModal } from 'components/TaskModal/TaskModal';\n\nexport const TaskList = ({ tasks, currentDate }) => {\n  // const navigate = useNavigate();\n  const [isFormOpen, setIsFormOpen] = useState(false);\n  const [taskForForm, setTaskForForm] = useState({});\n\n  const handleChangeTask = task => {\n    setTaskForForm(task);\n    setIsFormOpen(true);\n    // navigate(`/calendar/day/${day}`);\n  };\n\n  const closeForm = () => {\n    setTaskForForm({});\n    setIsFormOpen(false);\n  };\n\n  return (\n    <List>\n      {tasks\n        .filter(task => !moment(task.date).diff(moment(currentDate), 'day'))\n        .map((task, idx) => (\n          <TaskItem\n            key={idx + 1}\n            bg={`var(--calend-${task.priority}-bg-color)`}\n            color={`var(--calend-${task.priority}-color)`}\n          >\n            <div onClick={() => handleChangeTask(task)}>\n              <TaskLink>{task.title}</TaskLink>\n            </div>\n            {isFormOpen && (\n              <TaskModal\n                isOpen={isFormOpen}\n                onClose={closeForm}\n                category={task.category}\n                task={taskForForm}\n              />\n            )}\n          </TaskItem>\n        ))}\n    </List>\n  );\n};\n","import moment from 'moment';\nimport { CalendarGrid, Cell, Day, WrapperDay } from './CalendarTable.styled';\nimport { TaskList } from '../TaskList/TaskList';\nimport { setDay } from 'helpers/setDay';\nimport { useNavigate, useParams } from 'react-router';\nimport { useEffect, useState } from 'react';\nimport { fetchTasksOperation } from 'redux/tasks/operations';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectIsUpdating } from 'redux/tasks/selectors';\n\nexport const CalendarTable = () => {\n  const { currentMonth } = useParams();\n  const [tasks, setTasks] = useState([]);\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n\n  const date = moment(`${currentMonth}-01`, 'YYYY-MM-DD');\n  const { startMonth, endMonth, weeks, daysArray } = setDay(date);\n  const isCurrentDay = day => moment().isSame(day, 'day');\n  const editTask = useSelector(selectIsUpdating);\n\n  useEffect(() => {\n    (async () => {\n      const { payload } = await dispatch(fetchTasksOperation(currentMonth));\n      setTasks(payload);\n    })();\n  }, [currentMonth, dispatch, editTask]);\n\n  const handleNavigateToDay = date => {\n    const day = moment(date).format('YYYY-MM-DD');\n    localStorage.setItem('type', 'day');\n    localStorage.setItem('date', day);\n    navigate(`/calendar/day/${day}`);\n  };\n\n  return (\n    <CalendarGrid rows={weeks}>\n      {daysArray.map((dayItem, idx) => (\n        <Cell key={idx}>\n          <WrapperDay\n            onClick={() => handleNavigateToDay(dayItem)}\n            // to={`/calendar/day/${moment(dayItem).format('YYYY-MM-DD')}`}\n          >\n            <Day\n              color={`${\n                isCurrentDay(dayItem)\n                  ? '#FFFFFF'\n                  : `${\n                      startMonth > dayItem || endMonth < dayItem\n                        ? 'transparent'\n                        : 'var(--date-color)'\n                    }`\n              }`}\n              background={`${\n                isCurrentDay(dayItem) ? 'var(--accent-color)' : 'transparent'\n              }`}\n            >\n              {dayItem.format('D')}\n            </Day>\n          </WrapperDay>\n          {startMonth < dayItem && endMonth > dayItem && (\n            <TaskList currentDate={dayItem} tasks={tasks} />\n          )}\n        </Cell>\n      ))}\n    </CalendarGrid>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const HeadWrapper = styled.div`\n  display: grid;\n  grid-template-columns: repeat(7, 1fr);\n  justify-content: center;\n  text-align: center;\n  align-items: center;\n  height: 50px;\n  border: 1px solid var(--calendar-grid-border);\n  border-radius: 8px;\n  margin-bottom: 14px;\n  overflow: hidden;\n`;\n\nexport const HeadCell = styled.div`\n  /* display: flex; */\n  /* justify-content: center; */\n  /* align-items: center; */\n  text-align: center;\n  text-transform: uppercase;\n  background-color: var(--cell-background);\n  color: ${props => props.weekend};\n\n  padding: 16px 0;\n`;\n","import { useMediaQuery } from 'react-responsive';\nimport moment from 'moment';\n\nimport { HeadCell, HeadWrapper } from './MonthCalendarHead.styled';\n\nexport const MonthCalendarHead = () => {\n  const isMobile = useMediaQuery({ maxWidth: 767 });\n  //   const day = moment().day(1).format('ddd');\n  //   console.log(day);\n\n  return (\n    <HeadWrapper>\n      {[...Array(7)].map((_, idx) => (\n        <HeadCell\n          key={idx}\n          weekend={\n            idx === 5 || idx === 6\n              ? `var(--accent-color)`\n              : `var(--primary-text-color)`\n          }\n        >\n          {isMobile\n            ? moment()\n                .day(idx + 1)\n                .format('ddd')\n                .charAt(0)\n            : moment()\n                .day(idx + 1)\n                .format('ddd')}\n        </HeadCell>\n      ))}\n    </HeadWrapper>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const CalendarWrapper = styled.div`\n  width: 100%;\n  height: 100%;\n  /* background-color: var(--page-bg-color); */\n  /* padding: 38px 0; */\n`;\n\n// export const Container = styled.div`\n//   padding: 0 20px;\n// `;\n","import { CalendarTable } from './CalendarTable/CalendarTable';\nimport { MonthCalendarHead } from './MonthCalendarHead/MonthCalendarHead';\nimport { CalendarWrapper } from './ChoosedMonth.styled';\n\nconst ChoosedMonth = () => {\n  return (\n    <CalendarWrapper>\n      <MonthCalendarHead />\n      <CalendarTable />\n    </CalendarWrapper>\n  );\n};\n\nexport default ChoosedMonth;\n","import styled from '@emotion/styled';\nimport { mobile, max } from 'styles/media';\n\nexport const Container = styled.div`\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: var(--primary-bg-color);\n  border: 1px solid #dce3e5cc;\n  border-radius: 8px;\n  box-shadow: 0px 4px 57px 0px rgba(17, 17, 17, 0.05);\n  z-index: 1000;\n  ${max(mobile)} {\n    width: 100%;\n  }\n`;\n\nexport const Backdrop = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: transparent;\n  z-index: 999;\n`;\n\nexport const Content = styled.div`\n  background-color: white;\n  padding: 20px;\n  border-radius: 5px;\n`;\n\nexport const CloseButton = styled.button`\n  position: absolute;\n  cursor: pointer;\n  background-color: transparent;\n  border: none;\n  outline: none;\n  font-size: 24px;\n  padding: 0;\n`;\n\nexport const IconClose = styled.svg`\n  width: 24px;\n  height: 24px;\n  stroke: var(--input-border-color-focus);\n  transition: color 0.3s ease-in-out;\n  &:hover {\n    stroke: #84828a;\n  }\n`;\n","import React, { useEffect } from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Backdrop, Container, IconClose, CloseButton } from './Modal.styled';\nimport sprite from '../../assets/images/icons/icons.svg';\n\nconst Modal = ({\n  isOpen,\n  onClose,\n  closeButtonPosition = { top: '14px', right: '14px' },\n  children,\n}) => {\n  const handleBackdropClick = event => {\n    if (event.target === event.currentTarget) {\n      onClose();\n    }\n  };\n\n  useEffect(() => {\n    const handleEscKeyPress = event => {\n      if (isOpen && event.key === 'Escape') {\n        onClose();\n      }\n    };\n\n    document.body.style.overflow = isOpen ? 'hidden' : 'auto';\n    window.addEventListener('keydown', handleEscKeyPress);\n\n    return () => {\n      window.removeEventListener('keydown', handleEscKeyPress);\n      document.body.style.overflow = 'auto';\n    };\n  }, [isOpen, onClose]);\n\n  if (!isOpen) {\n    return null;\n  }\n  return ReactDOM.createPortal(\n    <Backdrop onClick={handleBackdropClick}>\n      <Container id=\"modal-container\">\n        <CloseButton onClick={onClose} style={closeButtonPosition}>\n          <IconClose>\n            <use xlinkHref={`${sprite}#icon-x-close`} width={24} height={24} />\n          </IconClose>\n        </CloseButton>\n\n        {children}\n      </Container>\n    </Backdrop>,\n    document.getElementById('modal-root')\n  );\n};\n\nexport default Modal;\n","import styled from '@emotion/styled';\nimport { Field } from 'formik';\nimport { min, tablet } from 'styles/media';\n\n\nexport const FormContainer = styled.div`\n    position: relative;\n    width: 303px;\n    padding: 48px 18px 40px;\n    border-radius: 8px;\n    border: 1px solid rgba(220, 227, 229, 0.8);\n    background-color: var(--task-popup-bg);\n    box-shadow: 0px 4px 16px 0px rgba(17, 17, 17, 0.1);\n\n    ${min(tablet)} {\n        width: 396px;\n        padding: 40px 28px;\n    }\n`;\n\nexport const CloseButton = styled.button`\n    position: absolute;\n    top: 14px;\n    right: 14px;\n    width: 24px;\n    height: 24px;\n    border-radius: 50%;\n    border: none;\n    background-color: transparent;\n    cursor: pointer;\n`;\n\nexport const CloseIcon = styled.svg`\n    width: 24px;\n    height: 24px;\n    stroke: rgba(17, 17, 17, 0.1);\n`;\n\nexport const Label = styled.label`\n    display: flex;\n    flex-direction: column;\n    gap: 8px;\n    color: rgba(52, 52, 52, 1);\n    font-weight: 500;\n    font-size: 12px;\n    line-height: 1.16;\n`;\n\nexport const TitleField = styled(Field)`\n    width: 267px;\n    height: 42px;\n    flex-shrink: 0;\n    padding: 12px 14px;\n    margin-bottom: 16px;\n    border-radius: 8px;\n    border: none;\n    background-color: rgba(246, 246, 246, 1);\n    color: rgba(52, 52, 52, 1);\n    font-size: 14px;\n    font-weight: 600;\n    line-height: 1.28;\n    cursor: pointer;\n\n    ${min(tablet)} {\n        height: 46px;\n        width: 340px;\n        padding: 14px 18px;\n        margin-bottom: 18px;\n    }\n\n    &::placeholder {\n        opacity: 1;\n        color: var(--task-popup-color-text);\n        font-size: 14px;\n        line-height: 1.28;\n    }\n`;\n\nexport const FieldContainer = styled.div`\n    display: flex;\n    gap: 14px;\n`;\n\nexport const TimeField = styled(Field)`\n    width: 126px;\n    height: 42px;\n    flex-shrink: 0;\n    padding: 12px 14px;\n    margin-bottom: 16px;\n    border-radius: 8px;\n    border: none;\n    background-color: rgba(246, 246, 246, 1);\n    color: rgba(52, 52, 52, 1);\n    font-size: 14px;\n    line-height: 1.28;\n    &::-webkit-calendar-picker-indicator {\n    opacity: 0;\n    cursor: pointer;\n    width: 32px;\n}\n\n    ${min(tablet)} {\n        width: 163px;\n        height: 46px;\n        padding: 14px 18px;\n        margin-bottom: 32px;\n        &::-webkit-calendar-picker-indicator {\n        width: 60px;\n    }\n}\n`;\n\nexport const PriorityContainer = styled.div`\n    display: flex;\n    gap: 16px;\n    margin-bottom: 32px;\n`;\n\nexport const PriorityLabel = styled.label`\n    position: relative;\n    display: flex;\n    align-items: center;\n    gap: 6px;\n    color: rgba(52, 52, 52, 1);\n    font-size: 12px;\n    line-height: 1.16;\n\n    ${min(tablet)} {\n        font-size: 14px;\n        line-height: 1.16;\n    }\n`;\n\nexport const PriorityField = styled(Field)`\n    opacity: 0;\n    position: absolute;\n    top: 0;\n    left: 0;\n    cursor: pointer;\n`;\n\nexport const Blue = styled.svg`\n    width: 10px;\n    height: 10px;\n`;\nexport const BlueLine = styled.svg`\n    width: 10px;\n    height: 10px;\n`;\n\nexport const Orange = styled.svg`\n    width: 10px;\n    height: 10px;\n`;\n\nexport const OrangeLine = styled.svg`\n    width: 10px;\n    height: 10px;\n`;\n\nexport const Red = styled.svg`\n    width: 10px;\n    height: 10px;\n`;\n\nexport const RedLine = styled.svg`\n    width: 10px;\n    height: 10px;\n`;\n\nexport const ButtonContainer = styled.div`\n    display: flex;\n    gap: 14px;\n`;\n\nexport const OperationButton = styled.button`\n    display: flex;\n    width: 135px;\n    height: 42px;\n    padding: 8px 20px;\n    justify-content: center;\n    align-items: center;\n    gap: 10px;\n    border-radius: 8px;\n    border: none;\n    background: var(--accent-color);\n    color: var(--invert-text-color);\n    text-align: center;\n    font-size: 14px;\n    line-height: 1.28;\n    transition: background-color 250ms linear;\n\n&:hover,\n&:focus {\n    background-color: var(--btn-bg-hover);\n}\n\n${min(tablet)} {\n    width: 182px;\n    height: 48px;\n    padding: 10px 20px;;\n    }\n`;\n\nexport const AddIcon = styled.svg`\n    width: 20px;\n    height: 20px;\n`;\n\nexport const EditIcon = styled.svg`\n    width: 18px;\n    height: 18px;\n`;\n\nexport const CancelButton = styled.button`\n    width: 118px;\n    height: 42px;\n    padding: 10px 20px;\n    justify-content: center;\n    align-items: center;\n    gap: 10px;\n    border-radius: 8px;\n    border: none;\n    background-color: var(--task-btn-cancel);\n    color: var(--primary-text-color);\n    text-align: center;\n    font-size: 14px;\n    line-height: 1.28;\n    transition: background-color 250ms linear;\n\n&:hover,\n&:focus {\n    background-color: var(--btn-bg-hover);\n    color: var(--task-popup-bg);\n}\n\n${min(tablet)} {\n    width: 144px;\n    height: 48px;\n    }\n`;","import React, { useState, useEffect } from 'react';\nimport { Formik, Form, ErrorMessage } from 'formik';\nimport { useDispatch} from 'react-redux';\nimport icons from '../../../assets/images/icons/icons.svg';\nimport * as Yup from 'yup';\nimport moment from 'moment';\nimport { addTaskOperation, updateTaskOperation } from '../../../redux/tasks/operations';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport {  \n    OperationButton,\n    AddIcon,\n    Blue,\n    BlueLine,\n    ButtonContainer,\n    CancelButton,\n    CloseButton,\n    CloseIcon,\n    EditIcon,\n    FieldContainer,\n    FormContainer,\n    Label,\n    Orange,\n    OrangeLine,\n    PriorityContainer,\n    PriorityField,\n    PriorityLabel,\n    Red,\n    RedLine,\n    TimeField,\n    TitleField, } from './TaskForm.styled';\n\nconst taskFormSchema = Yup.object().shape({\n    title: Yup.string('Enter title')\n        .max(250, 'Text must be at most 250characters')\n        .required('Title is required'),\n    start: Yup.string('Enter start')\n        .matches(/^([01]\\d|2[0-3]):([0-5]\\d)$/, 'Invalid start time')\n        .required('Start time is required'),\n    end: Yup.string()\n        .matches(/^([01]\\d|2[0-3]):([0-5]\\d)$/, 'Invalid end time')\n        .when('start', (start, schema) =>\n        schema.test({\n            test: function (end) {\n                if (!start || !end) return true;\n            return end > start;\n            },\n            message: 'End time must be greater than start time',\n        })\n        )\n    });\n\nexport const TaskForm = ({ category, task, onClose }) => {\n    const [operation, setOperation] = useState('create');\n\n    const dispatch = useDispatch();\n\n    const initialValues = {\n        title: '',\n        start: '09:00',\n        end: '09:30',\n        priority: 'low',\n        };\n    \n    useEffect(() => {\n        if (task?._id) setOperation('edit');\n    }, [task]);\n\n    const onSubmit = values => {\n        const taskId = task?._id;\n        const taskData = {\n            title: values.title,\n            start: values.start,\n            end: values.end,\n            priority: values.priority,\n            date: task?.date || moment().format('YYYY-MM-DD'),\n            category: category,\n            };\n\n        if (operation === 'edit') {\n            dispatch(updateTaskOperation({ taskId, updateTaskData: taskData }))\n                .then(data => {\n                if (data.error) {\n                    throw new Error(data.payload);\n                }\n                Notify.info('Task has been edited.');\n                onClose();\n                })\n                .catch(error => {\n                    Notify.failure('Something went wrong.');\n                });\n            } else {\n                dispatch(addTaskOperation(taskData))\n                    .then(data => {\n                        if (data.error) {\n                            throw new Error(data.payload);\n                        }\n                        Notify.success('Task has been successfully created.');       \n                        onClose();\n                    })\n                    .catch(error => {\n                        Notify.failure('Something went wrong.');\n                    });\n            }\n    };\n\n    return (\n        <Formik\n            initialValues={task || initialValues}\n            validationSchema={taskFormSchema}\n            onSubmit={onSubmit}\n        >\n            {({ values }) => (\n            <FormContainer>\n                <CloseButton\n                    type=\"button\"\n                    aria-label=\"close button\"\n                    onClick={onClose}\n                >\n                    <CloseIcon>\n                        <use href={icons + '#icon-x-close'}></use>\n                    </CloseIcon>\n                </CloseButton>\n                <Form>\n                    <Label>\n                        Title\n                        <ErrorMessage name=\"title\" component=\"div\" />\n                        <TitleField type=\"text\" name=\"title\" placeholder=\"Enter text\" />\n                    </Label>\n    \n                    <FieldContainer>\n                        <Label>\n                            Start\n                            <ErrorMessage name=\"start\" component=\"div\" />\n                            <TimeField type=\"time\" name=\"start\" />\n                        </Label>\n                        <Label>\n                            End\n                            <ErrorMessage name=\"end\" component=\"div\" />\n                            <TimeField type=\"time\" name=\"end\" />\n                        </Label>\n                    </FieldContainer>\n    \n                    <PriorityContainer role=\"group\">\n                        <PriorityLabel>\n                            <PriorityField type=\"radio\" name=\"priority\" value=\"low\" />\n                            {values.priority === 'low' ? (\n                                <BlueLine>\n                                    <use href={icons + '#icon-ellipse-blue-stroke'}></use>\n                                </BlueLine>\n                            ) : (\n                                <Blue>\n                                    <use href={icons + '#icon-ellipse-blue'}></use>\n                                </Blue>\n                            )}\n                            Low\n                        </PriorityLabel>\n                        <PriorityLabel>\n                            <PriorityField type=\"radio\" name=\"priority\" value=\"medium\" />\n                            {values.priority === 'medium' ? (\n                                <OrangeLine>\n                                    <use href={icons + '#icon-ellipse-orange-stroke'}></use>\n                                </OrangeLine>\n                            ) : (\n                                <Orange>\n                                    <use href={icons + '#icon-ellipse-orange'}></use>\n                                </Orange>\n                            )}\n                            Medium\n                        </PriorityLabel>\n                        <PriorityLabel>\n                            <PriorityField type=\"radio\" name=\"priority\" value=\"high\" />\n                            {values.priority === 'high' ? (\n                                <RedLine>\n                                    <use href={icons + '#icon-ellipse-pink-stroke'}></use>\n                                </RedLine>\n                            ) : (\n                                <Red>\n                                    <use href={icons + '#icon-ellipse-pink'}></use>\n                                </Red>\n                            )}\n                            High\n                        </PriorityLabel>\n                    </PriorityContainer>\n    \n                    <ButtonContainer>\n                        {operation === 'edit' ? (\n                            <OperationButton type=\"submit\">\n                                <EditIcon stroke=\"#fff\" fill=\"none\">\n                                    <use href={icons + '#icon-pencil'}></use>\n                                </EditIcon>\n                                Edit\n                            </OperationButton>\n                        ) : (\n                            <OperationButton type=\"submit\">\n                                <AddIcon stroke=\"#fff\">\n                                    <use href={icons + '#icon-plus'}></use>\n                                </AddIcon>\n                                Add\n                            </OperationButton>\n                        )}\n    \n                        <CancelButton type=\"button\" onClick={onClose}>\n                            Cancel\n                        </CancelButton>\n                    </ButtonContainer>\n                </Form>\n            </FormContainer>\n        )}\n        </Formik>\n    );\n};","import React from 'react';\nimport  Modal  from 'components/Modal/Modal';\nimport { TaskForm } from 'components/TaskModal/TaskForm/TaskForm';\n\nexport const TaskModal = ({ category, task, onClose, isOpen }) => {\n    const closeButtonPosition = { top: '16px', right: '16px' };\n    \n    return (\n        <Modal onClose={onClose} isOpen={isOpen} closeButtonPosition={closeButtonPosition}>\n        <TaskForm onClose={onClose} category={category} task={task} />\n        </Modal>\n    );\n};","import moment from 'moment';\n\nexport const setDay = day => {\n  moment.updateLocale('en', { week: { dow: 1 } });\n  let currentDay;\n  if (!day) {\n    currentDay = moment();\n  } else {\n    currentDay = moment(day).clone();\n  }\n  const startMonth = currentDay.clone().startOf('month'); // початок поточного місяця\n  const endMonth = currentDay.clone().endOf('month'); // кінець поточного місяця\n\n  const startDay = startMonth.clone().startOf('week'); // перший день тижня, в якому починається поточний місяць\n  const endDay = endMonth.clone().endOf('week'); // останній день тижня, в якому закінчується поточний місяць\n\n  const startWeek = currentDay.clone().startOf('week'); // перший день тижня, якому знаходиться обрана дата\n  const endWeek = currentDay.clone().endOf('week'); // останній  день тижня, якому знаходиться обрана дата\n\n  const dayDifference = endDay.diff(startDay, 'days') + 1; // кількість днів, що відображаються на календарі (ячейки)\n  const weeks = dayDifference / 7; //кількість тижнів в місяці (рядки)\n\n  const startCalendar = startDay.clone().subtract(1, 'day');\n  const daysArray = [...Array(dayDifference)].map(() =>\n    startCalendar.add(1, 'day').clone()\n  );\n\n  const dates = {\n    startMonth,\n    endMonth,\n    startDay,\n    endDay,\n    startWeek,\n    endWeek,\n    dayDifference,\n    weeks,\n    daysArray,\n  };\n  return dates;\n};\n","import { createSelector } from '@reduxjs/toolkit';\n\nconst selectTasksState = state => state.tasks;\nconst selectTasks = state => state.tasks.tasks;\nconst selectTasksError = state => state.tasks.error;\nconst selectIsTasksLoading = state => state.tasks.isTasksLoading;\nconst selectIsFetchingTasks = state => state.tasks.isFetchingTasks;\nconst selectIsAdding = state => state.tasks.isAdding;\nconst selectIsDeleting = state => state.tasks.isDeleting;\nconst selectIsUpdating = state => state.tasks.isUpdating;\nconst selectCurrentTaskId = state => state.tasks.currentTaskId;\n\nconst selectTaskOperations = createSelector(\n  [selectIsFetchingTasks, selectIsAdding, selectIsDeleting, selectIsUpdating],\n  (isFetchingTasks, isAdding, isDeleting, isUpdating) => ({\n    isFetchingTasks,\n    isAdding,\n    isDeleting,\n    isUpdating,\n  })\n);\n\nexport {\n  selectTasks,\n  selectCurrentTaskId,\n  selectTasksError,\n  selectIsAdding,\n  selectIsDeleting,\n  selectIsTasksLoading,\n  selectIsUpdating,\n  selectIsFetchingTasks,\n  selectTaskOperations,\n  selectTasksState,\n};\n"],"names":["CalendarGrid","styled","props","rows","Cell","min","tablet","desktop","WrapperDay","Day","color","background","List","TaskItem","bg","TaskLink","TaskList","tasks","currentDate","useState","isFormOpen","setIsFormOpen","taskForForm","setTaskForForm","closeForm","filter","task","moment","date","diff","map","idx","priority","onClick","handleChangeTask","title","TaskModal","isOpen","onClose","category","CalendarTable","currentMonth","useParams","setTasks","navigate","useNavigate","dispatch","useDispatch","setDay","startMonth","endMonth","weeks","daysArray","isCurrentDay","day","isSame","editTask","useSelector","selectIsUpdating","useEffect","fetchTasksOperation","payload","dayItem","format","localStorage","setItem","handleNavigateToDay","HeadWrapper","HeadCell","weekend","MonthCalendarHead","isMobile","useMediaQuery","maxWidth","Array","_","charAt","CalendarWrapper","Container","max","mobile","Backdrop","CloseButton","IconClose","closeButtonPosition","top","right","children","handleEscKeyPress","event","key","document","body","style","overflow","window","addEventListener","removeEventListener","ReactDOM","target","currentTarget","id","xlinkHref","sprite","width","height","getElementById","FormContainer","CloseIcon","Label","TitleField","Field","FieldContainer","TimeField","PriorityContainer","PriorityLabel","PriorityField","Blue","BlueLine","Orange","OrangeLine","Red","RedLine","ButtonContainer","OperationButton","AddIcon","EditIcon","CancelButton","taskFormSchema","Yup","shape","required","start","matches","end","when","schema","test","message","TaskForm","operation","setOperation","_id","initialValues","validationSchema","onSubmit","values","taskId","taskData","updateTaskOperation","updateTaskData","then","data","error","Error","Notify","catch","addTaskOperation","type","href","icons","name","component","placeholder","role","value","stroke","fill","Modal","currentDay","week","dow","clone","startOf","endOf","startDay","endDay","startWeek","endWeek","dayDifference","startCalendar","subtract","add","state","isUpdating","createSelector","isFetchingTasks","isAdding","isDeleting"],"sourceRoot":""}