{"version":3,"file":"static/js/130.4b5c884d.chunk.js","mappings":"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","sources":["components/MainContainer/MainContainer.styled.jsx","components/MainContainer/MainContainer.jsx","components/Calendar/CalendarToolbar/CalendarToolbar.styled.jsx","components/Calendar/CalendarToolbar/CalendarToolbar.jsx","pages/CalendarPage.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { desktop, min, tablet } from 'styles/media';\n\nexport const Main = styled.main`\n  background-color: var(--page-bg-color);\n  padding-top: 64px;\n  padding-bottom: 40px;\n\n  ${min(tablet)} {\n    padding-bottom: 38px;\n  }\n\n  ${min(desktop)} {\n    padding-top: 38px;\n    padding-bottom: 32px;\n  }\n`;\n\nexport const Container = styled.div`\n  padding: 0 20px;\n\n  ${min(tablet)} {\n    padding: 0 32px;\n  }\n`;\n","import { Container, Main } from './MainContainer.styled';\n\nexport const MainContainer = ({ children }) => {\n  return (\n    <Main>\n      <Container>{children}</Container>\n    </Main>\n  );\n};\n","import styled from '@emotion/styled';\nimport { NavLink } from 'react-router-dom';\nimport { min, tablet } from 'styles/media';\n\nexport const Toolbar = styled.div`\n  margin-bottom: 24px;\n\n  ${min(tablet)} {\n    display: flex;\n    justify-content: space-between;\n  }\n`;\n\nexport const DateContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 18px;\n  gap: 8px;\n`;\n\nexport const DateWrapper = styled.div`\n  background-color: var(--accent-color);\n  width: 150px;\n  /* width: auto; */\n  display: flex;\n  padding: 6px 12px;\n  justify-content: center;\n  align-items: center;\n  border-radius: 8px;\n`;\n\nexport const Date = styled.span`\n  text-transform: uppercase;\n  color: var(--invert-text-color);\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 700;\n  line-height: 18px;\n`;\n\nexport const ToggleWrapper = styled.div`\n  /* padding: 7px 10px; */\n  display: flex;\n  background: var(--calendar-grid-border);\n  border: 1px solid var(--calendar-grid-border);\n  border-radius: 8px;\n  gap: 1px;\n  overflow: hidden;\n`;\n\nexport const Toggle = styled.div`\n  padding: 7px 10px;\n  background: var(--primary-bg-color);\n`;\n\nexport const ToggleIcon = styled.svg`\n  &:hover {\n    fill: var(--accent-color);\n  }\n`;\n\nexport const TypeWrapper = styled.div`\n  display: flex;\n  border-radius: 8px;\n  overflow: hidden;\n  height: 34px;\n`;\n\nexport const Type = styled.div`\n  width: 76px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 8px 0;\n  background-color: var(--switch-type-bg-active);\n`;\n\nexport const TypeLink = styled(NavLink)`\n  text-decoration: none;\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 500;\n  line-height: 18px;\n  color: var(--switch-type-color);\n`;\n\n\n","import sprite from '../../../assets/images/icons/icons.svg';\nimport { Link, useNavigate, useParams } from 'react-router-dom';\nimport moment from 'moment';\nimport {\n  Date,\n  DateContainer,\n  DateWrapper,\n  Toggle,\n  ToggleIcon,\n  ToggleWrapper,\n  Toolbar,\n  Type,\n  TypeWrapper,\n} from './CalendarToolbar.styled';\nimport { TypeLink } from './CalendarToolbar.styled';\nimport { useEffect, useState } from 'react';\n\nconst CalendarToolbar = () => {\n  const [currentDate, setCurrentDate] = useState('');\n  const [format, setFormat] = useState('');\n  const params = useParams();\n\n  let paramsType;\n  let paramsDate;\n\n  if (params.currentDay) {\n    paramsType = 'day';\n    paramsDate = params.currentDay;\n  }\n  if (params.currentMonth) {\n    paramsType = 'month';\n    paramsDate = params.currentMonth;\n  }\n\n  const navigate = useNavigate();\n\n  const month = moment(currentDate).format('YYYY-MM');\n  const day = moment(currentDate).format('YYYY-MM-DD');\n\n  useEffect(() => {\n    const storedDate = localStorage.getItem('date');\n    const storedType = localStorage.getItem('type');\n\n    if (storedDate) {\n      setCurrentDate(storedDate);\n    } else {\n      setCurrentDate(moment().format('YYYY-MM-DD'));\n    }\n\n    if (storedType) {\n      setFormat(storedType);\n    } else {\n      setFormat('month');\n    }\n  }, []);\n\n  const handleClick = () => {\n    const date = moment(paramsDate).add(1, paramsType).format('YYYY-MM-DD');\n    setCurrentDate(date);\n    localStorage.setItem('date', date);\n    const month = moment(date).format('YYYY-MM');\n    const day = moment(date).format('YYYY-MM-DD');\n    navigate(paramsType === 'month' ? `month/${month}` : `day/${day}`);\n    if (params.currentDay) {\n      setFormat('day');\n    }\n  };\n\n  const handleClickBack = () => {\n    const date = moment(paramsDate)\n      .subtract(1, paramsType)\n      .format('YYYY-MM-DD');\n    localStorage.setItem('date', date);\n    setCurrentDate(date);\n    const month = moment(date).format('YYYY-MM');\n    navigate(paramsType === 'month' ? `month/${month}` : `day/${date}`);\n  };\n\n  const handleChangeType = e => {\n    switch (e.currentTarget.textContent) {\n      case 'Month':\n        setFormat('month');\n        localStorage.setItem('type', 'month');\n        break;\n      case 'Day':\n        setFormat('day');\n        localStorage.setItem('type', 'day');\n        break;\n      default:\n        return format;\n    }\n  };\n\n  return (\n    <Toolbar>\n      <DateContainer>\n        <DateWrapper>\n          <Date>\n            {moment(paramsDate).format(\n              paramsType === 'day' ? 'DD MMM YYYY' : 'MMMM YYYY'\n            )}\n          </Date>\n        </DateWrapper>\n        <ToggleWrapper>\n          <div onClick={handleClickBack}>\n            <Toggle>\n              <ToggleIcon width=\"16\" height=\"16\">\n                <use\n                  xlinkHref={`${sprite}#icon-chevron-left`}\n                  width={16}\n                  height={16}\n                />\n              </ToggleIcon>\n            </Toggle>\n          </div>\n          <div onClick={handleClick}>\n            <Toggle>\n              <ToggleIcon width=\"16\" height=\"16\">\n                <use\n                  xlinkHref={`${sprite}#icon-chevron-right`}\n                  width={16}\n                  height={16}\n                />\n              </ToggleIcon>\n            </Toggle>\n          </div>\n        </ToggleWrapper>\n      </DateContainer>\n      <TypeWrapper>\n        <Type>\n          <TypeLink to={`month/${month}`} onClick={handleChangeType}>\n            Month\n          </TypeLink>\n        </Type>\n        <Type>\n          <Link to={`day/${day}`} onClick={handleChangeType}>\n            Day\n          </Link>\n        </Type>\n      </TypeWrapper>\n    </Toolbar>\n  );\n};\n\nexport default CalendarToolbar;\n","import React, { useEffect } from 'react';\nimport { MainContainer } from 'components/MainContainer/MainContainer';\nimport CalendarToolbar from 'components/Calendar/CalendarToolbar/CalendarToolbar';\nimport { Outlet, useNavigate } from 'react-router';\nimport moment from 'moment';\n\nconst CalendarPage = () => {\n  const navigate = useNavigate();\n  // const [currentDate, setCurrentDate] = useState(\n  //   localStorage.getItem('date') || moment().format('YYYY-MM-DD').toString()\n  // );\n  // const [format, setFormat] = useState(localStorage.getItem('type') || 'month');\n  // let format = ;\n  useEffect(() => {\n    const month = moment().format('YYYY-MM').toString();\n    navigate(`/calendar/month/${month}`);\n  }, [navigate]);\n\n  const format = localStorage.getItem('type') || 'month';\n  useEffect(() => {\n    const date =\n      localStorage.getItem('date') || moment().format('YYYY-MM-DD').toString();\n\n    const month = date.slice(0, -3);\n\n    if (format === 'month') {\n      navigate(`/calendar/month/${month}`);\n    } else {\n      navigate(`/calendar/day/${date}`);\n    }\n\n    localStorage.setItem('date', date);\n    localStorage.setItem('type', format);\n  }, [navigate, format]);\n\n  // useEffect(() => {\n  //   let date;\n  //   const format = localStorage.getItem('type') || 'month';\n  //   switch (format) {\n  //     case 'month':\n  //       date = moment(\n  //         localStorage.getItem('date') ||\n  //           moment().format('YYYY-MM-DD').toString()\n  //       ).format('YYYY-MM');\n  //       navigate(`/calendar/month/${date}`);\n  //       break;\n  //     case 'day':\n  //       date = moment(\n  //         localStorage.getItem('date') ||\n  //           moment().format('YYYY-MM-DD').toString()\n  //       ).format('YYYY-MM-DD');\n  //       navigate(`/calendar/day/${date}`);\n  //       break;\n  //     default:\n  //       return;\n  //   }\n  // }, [navigate]);\n\n  return (\n    <MainContainer>\n      <CalendarToolbar\n      // currentDate={currentDate}\n      // setCurrentDate={setCurrentDate}\n      // globalFormat={format}\n      // setFormat={setFormat}\n      />\n      <Outlet />\n    </MainContainer>\n  );\n};\n\nexport default CalendarPage;\n"],"names":["Main","styled","min","tablet","desktop","Container","MainContainer","children","Toolbar","DateContainer","DateWrapper","Date","ToggleWrapper","Toggle","ToggleIcon","TypeWrapper","Type","TypeLink","NavLink","paramsType","paramsDate","useState","currentDate","setCurrentDate","format","setFormat","params","useParams","currentDay","currentMonth","navigate","useNavigate","month","moment","day","useEffect","storedDate","localStorage","getItem","storedType","handleChangeType","e","currentTarget","textContent","setItem","onClick","date","subtract","width","height","xlinkHref","sprite","add","to","toString","slice"],"sourceRoot":""}