{"version":3,"file":"static/js/155.d945cbb2.chunk.js","mappings":"+OAEaA,EAAeC,EAAAA,EAAAA,IAAH,0SAQM,SAAAC,GAAK,OAAIA,EAAMC,IAAV,IAIvBC,EAAOH,EAAAA,EAAAA,IAAH,wKAQJI,EAAaJ,EAAAA,EAAAA,IAAH,uNAYVK,EAAML,EAAAA,EAAAA,IAAH,yLAOL,SAAAC,GAAK,OAAIA,EAAMK,KAAV,IACA,SAAAL,GAAK,OAAIA,EAAMM,UAAV,I,UCJRC,EAAgB,WAE3B,MApCa,SAAAC,GAEb,IAAIC,EADJC,IAAAA,aAAoB,KAAM,CAAEC,KAAM,CAAEC,IAAK,KAOzC,IAAMC,GAFJJ,EAHGD,EAGUE,IAAOF,GAFPE,OAIeI,QAAQC,QAAQ,SACxCC,EAAWP,EAAWK,QAAQG,MAAM,SAEpCC,EAAWL,EAAWC,QAAQC,QAAQ,QACtCI,EAASH,EAASF,QAAQG,MAAM,QAEhCG,EAAgBD,EAAOE,KAAKH,EAAU,QAAU,EAChDI,EAAQF,EAAgB,EAExBG,EAAgBL,EAASJ,QAAQU,SAAS,EAAG,OAcnD,MATc,CACZX,WAAAA,EACAG,SAAAA,EACAE,SAAAA,EACAC,OAAAA,EACAC,cAAAA,EACAE,MAAAA,EACAG,WAXgB,OAAIC,MAAMN,IAAgBO,KAAI,kBAC9CJ,EAAcK,IAAI,EAAG,OAAOd,OADkB,IAcjD,CAIoDe,GAA3ChB,EAAR,EAAQA,WAAYG,EAApB,EAAoBA,SAAUM,EAA9B,EAA8BA,MAAOG,EAArC,EAAqCA,UAI/BK,EAAe,SAAAtB,GAAG,OAAIE,MAASqB,OAAOvB,EAAK,MAAzB,EAExB,OACE,SAACV,EAAD,CAAcG,KAAMqB,EAApB,SACGG,EAAUE,KAAI,SAACK,EAASC,GAAV,OACb,SAAC/B,EAAD,WACE,SAACC,EAAD,WACE,SAACC,EAAD,CACEC,MAAK,UACHyB,EAAaE,GACT,2BADJ,UAGMnB,EAAamB,GAAWhB,EAAWgB,EAC/B,cACA,sBAGZ1B,WAAU,UACRwB,EAAaE,GAAW,sBAAwB,eAXpD,SAcGA,EAAQE,OAAO,UAhBXD,EADE,KAwBpB,ECxEYE,EAAoB,WAAQ,ECE5BC,EAAkBrC,EAAAA,EAAAA,IAAH,oGCEfsC,EAAe,WAC1B,OACE,UAACD,EAAD,YACE,SAACD,EAAD,KACA,SAAC5B,EAAD,MAGL,C","sources":["components/Calendar/ChoosedMonth/CalendarTable/CalendarTable.styled.jsx","components/Calendar/ChoosedMonth/CalendarTable/CalendarTable.jsx","components/Calendar/ChoosedMonth/MonthCalendarHead/MonthCalendarHead.jsx","components/Calendar/ChoosedMonth/ChoosedMonth.styled.jsx","components/Calendar/ChoosedMonth/ChoosedMonth.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const CalendarGrid = styled.div`\n  width: 100%;\n  height: 100%;\n  background-color: #dce3e580;\n  background-color: var(--calendar-grid-border);\n  display: grid;\n  grid-gap: 1px;\n  grid-template-columns: repeat(7, 1fr);\n  grid-template-rows: repeat(${props => props.rows}, 1fr);\n  border: var(--calendar-grid-border);\n`;\n\nexport const Cell = styled.div`\n  display: flex;\n  justify-content: flex-end;\n  background-color: #ffffff;\n  background-color: var(--cell-background);\n  padding: 8px 4px;\n`;\n\nexport const WrapperDay = styled.div`\n  display: flex;\n  text-align: end;\n  align-items: center;\n  justify-content: center;\n  height: 22px;\n  width: 22px;\n  /* padding: 4px 6px; */\n  font-size: 12px;\n  font-weight: 700;\n`;\n\nexport const Day = styled.div`\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border-radius: 6px;\n  color: ${props => props.color};\n  background: ${props => props.background};\n`;\n","import moment from 'moment';\nimport { CalendarGrid, Cell, Day, WrapperDay } from './CalendarTable.styled';\n// import { useState } from 'react';\n\nconst setDay = day => {\n  moment.updateLocale('en', { week: { dow: 1 } });\n  let currentDay;\n  if (!day) {\n    currentDay = moment();\n  } else {\n    currentDay = moment(day);\n  }\n  const startMonth = currentDay.clone().startOf('month'); // початок поточного місяця\n  const endMonth = currentDay.clone().endOf('month'); // кінець поточного місяця\n\n  const startDay = startMonth.clone().startOf('week'); // перший день тижня, в якому починається поточний місяць\n  const endDay = endMonth.clone().endOf('week'); // останній день тижня, в якому закінчується поточний місяць\n\n  const dayDifference = endDay.diff(startDay, 'days') + 1; // кількість днів, що відображаються на календарі (ячейки)\n  const weeks = dayDifference / 7; //кількість тижнів в місяці (рядки)\n\n  const startCalendar = startDay.clone().subtract(1, 'day');\n  const daysArray = [...Array(dayDifference)].map(() =>\n    startCalendar.add(1, 'day').clone()\n  );\n\n  const dates = {\n    startMonth,\n    endMonth,\n    startDay,\n    endDay,\n    dayDifference,\n    weeks,\n    daysArray,\n  };\n  return dates;\n};\n\nexport const CalendarTable = () => {\n  //   const [date, setDate] = useState(Date.now);\n  const { startMonth, endMonth, weeks, daysArray } = setDay();\n  //   const dateData = setDay(date);\n  //   console.log(dateData);\n\n  const isCurrentDay = day => moment().isSame(day, 'day');\n\n  return (\n    <CalendarGrid rows={weeks}>\n      {daysArray.map((dayItem, idx) => (\n        <Cell key={idx}>\n          <WrapperDay>\n            <Day\n              color={`${\n                isCurrentDay(dayItem)\n                  ? 'var(--date-color-accent)'\n                  : `${\n                      startMonth > dayItem || endMonth < dayItem\n                        ? 'transparent'\n                        : 'var(--date-color)'\n                    }`\n              }`}\n              background={`${\n                isCurrentDay(dayItem) ? 'var(--accent-color)' : 'transparent'\n              }`}\n            >\n              {dayItem.format('D')}\n            </Day>\n          </WrapperDay>\n        </Cell>\n      ))}\n    </CalendarGrid>\n  );\n};\n","export const MonthCalendarHead = () => {};\n","import styled from '@emotion/styled';\n\nexport const CalendarWrapper = styled.div`\n  width: 100%;\n  height: 100%;\n  background-color: var(--page-bg-color);\n`;\n","import { CalendarTable } from './CalendarTable/CalendarTable';\nimport { MonthCalendarHead } from './MonthCalendarHead/MonthCalendarHead';\nimport { CalendarWrapper } from './ChoosedMonth.styled';\n\nexport const ChoosedMonth = () => {\n  return (\n    <CalendarWrapper>\n      <MonthCalendarHead />\n      <CalendarTable />\n    </CalendarWrapper>\n  );\n};\n"],"names":["CalendarGrid","styled","props","rows","Cell","WrapperDay","Day","color","background","CalendarTable","day","currentDay","moment","week","dow","startMonth","clone","startOf","endMonth","endOf","startDay","endDay","dayDifference","diff","weeks","startCalendar","subtract","daysArray","Array","map","add","setDay","isCurrentDay","isSame","dayItem","idx","format","MonthCalendarHead","CalendarWrapper","ChoosedMonth"],"sourceRoot":""}