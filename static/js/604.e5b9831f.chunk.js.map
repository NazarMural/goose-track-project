{"version":3,"file":"static/js/604.e5b9831f.chunk.js","mappings":"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","sources":["components/Calendar/ChoosedDay/ChoosedDay.styled.jsx","components/Calendar/ChoosedDay/Title/Title.styled.jsx","components/Calendar/ChoosedDay/Title/Title.jsx","components/Calendar/ChoosedDay/Tasks/Tasks.styled.jsx","components/Calendar/ChoosedDay/PopUpReplace/PopUpReplace.styled.jsx","components/Calendar/ChoosedDay/PopUpReplace/PopUpReplace.jsx","components/Calendar/ChoosedDay/Tasks/Tasks.jsx","components/Calendar/ChoosedDay/ChoosedDay.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { desktop, min, tablet } from 'styles/media';\n\nexport const ContainerMain = styled.div`\n  display: flex;\n  gap: 30px;\n  overflow-x: auto;\n  overflow-y: hidden;\n  height: 432px;\n  scroll-snap-type: x mandatory;\n\n  ${min(tablet)} {\n    height: 568px;\n    gap: 16px;\n  }\n  ${min(desktop)} {\n    gap: 0;\n    justify-content: space-between;\n    max-width: 1087px;\n  }\n  /* width*/\n  &::-webkit-scrollbar {\n    width: 12px;\n  }\n\n  /* Track */\n  &::-webkit-scrollbar-track {\n    background: var(--task-scrollbar-track);\n    border-radius: 12px;\n  }\n\n  /* Handle */\n  &::-webkit-scrollbar-thumb {\n    background: var(--task-scrollbar-thumb);\n    border-radius: 12px;\n  }\n\n  /* Handle on hover */\n  &::-webkit-scrollbar-thumb:hover {\n    background: var(--task-scrollbar-thumb-hover);\n  }\n`;\n\nexport const ContainerSecond = styled.div`\n  position: relative;\n  padding: 18px;\n  width: 296px;\n  background-color: var(--primary-bg-color);\n  border: 1px solid var(--calendar-grid-border);\n  border-radius: 8px;\n  scroll-snap-align: start;\n\n  ${min(tablet)} {\n    width: 299px;\n    padding: 20px;\n  }\n  ${min(desktop)} {\n    width: 306px;\n  }\n`;\n\nexport const ContainerButtonAddTask = styled.div`\n  background-color: var(--primary-bg-color);\n  border-radius: 8px;\n  border-bottom-left-radius: 0;\n  border-bottom-right-radius: 0;\n  padding-bottom: 20px;\n`;\n\nexport const ButtonAddTask = styled.button`\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 8px;\n  width: 100%;\n  background-color: var(--add-task-bg);\n  border: 1px dashed var(--accent-color);\n  border-radius: 8px;\n  padding: 12px 0;\n`;\n\nexport const IconButtonAddTask = styled.svg`\n  width: 24px;\n  height: 24px;\n  stroke: var(--primary-text-color);\n  & use {\n    fill: transparent;\n  }\n`;\n\nexport const ButtonAddTaskText = styled.span`\n  font-size: 14px;\n  font-weight: 600;\n  line-height: 18px;\n  color: var(--primary-text-color);\n`;\n","import styled from '@emotion/styled';\nimport { min, tablet } from 'styles/media';\n\nexport const ContainerTitle = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 24px;\n  ${min(tablet)} {\n    margin-bottom: 28px;\n  }\n`;\n\nexport const MainTitle = styled.h2`\n  font-size: 18px;\n  font-weight: 700;\n  line-height: 20px;\n  margin: 0;\n\n  color: var(--primary-text-color);\n  ${min(tablet)} {\n    font-size: 20px;\n    line-height: 24px;\n  }\n`;\n\nexport const IconAddTask = styled.svg`\n  height: 22px;\n  width: 22px;\n  stroke: var(--primary-text-color);\n  padding: 7px 0;\n  cursor: pointer;\n  & use {\n    fill: transparent;\n  }\n  ${min(tablet)} {\n    height: 24px;\n    width: 24px;\n  }\n`;\n","import React from 'react';\nimport { ContainerTitle, IconAddTask, MainTitle } from './Title.styled';\nimport sprite from '../../../../assets/images/icons/icons.svg';\n\nconst Title = ({ type, onAdd }) => {\n  return (\n    <ContainerTitle>\n      <MainTitle>\n        {(() => {\n          switch (type) {\n            case 'to-do':\n              return 'To do';\n\n            case 'in-progress':\n              return 'In progress';\n            case 'done':\n              return 'Done';\n\n            default:\n              return;\n          }\n        })()}\n      </MainTitle>\n      <IconAddTask onClick={onAdd}>\n        <use xlinkHref={sprite + '#icon-icon-plus'} />\n      </IconAddTask>\n    </ContainerTitle>\n  );\n};\n\nexport default Title;\n","import styled from '@emotion/styled';\nimport { desktop, min, tablet } from 'styles/media';\n\nexport const ContainerListTasks = styled.div`\n  max-height: 270px;\n  overflow-y: auto;\n  width: 104%;\n  ${min(tablet)} {\n    max-height: 395px;\n  }\n  /* width*/\n  &::-webkit-scrollbar {\n    width: 6px;\n  }\n\n  /* Track */\n  &::-webkit-scrollbar-track {\n    background: var(--task-scrollbar-track);\n    border-radius: 12px;\n  }\n\n  /* Handle */\n  &::-webkit-scrollbar-thumb {\n    background: var(--task-scrollbar-thumb);\n    border-radius: 12px;\n  }\n\n  /* Handle on hover */\n  &::-webkit-scrollbar-thumb:hover {\n    background: var(--task-scrollbar-thumb-hover);\n  }\n`;\n\nexport const ListTasks = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 14px;\n  list-style: none;\n  margin: 0 0 13px 0;\n  padding: 0;\n  width: 296px;\n  ${min(tablet)} {\n    width: 299px;\n    gap: 18px;\n    margin: 0 0 17px 0;\n  }\n  ${min(desktop)} {\n    width: 306px;\n  }\n`;\n\nexport const Task = styled.li`\n  background-color: var(--page-bg-color);\n  padding: 14px 14px 18px 14px;\n  border: 1px solid var(--calendar-grid-border);\n\n  border-radius: 8px;\n`;\n\nexport const TaskTitle = styled.h3`\n  font-size: 14px;\n  font-weight: 500;\n  color: var(--primary-text-color);\n\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  padding: 0;\n  margin: 0 0 28px 0;\n  ${min(tablet)} {\n  }\n  ${min(desktop)} {\n  }\n`;\n\nexport const ContainerButtonsTask = styled.div`\n  display: flex;\n  align-items: end;\n`;\n\nexport const TaskImage = styled.img`\n  box-sizing: border-box;\n  width: 32px;\n  height: 32px;\n  border: 1.8px solid var(--accent-color);\n  border-radius: 50%;\n  margin-right: 8px;\n`;\n\nexport const TaskButtonPriority = styled.button`\n  height: 20px;\n  font-size: 10px;\n  font-weight: 600;\n  line-height: 12px;\n  color: var(--task-priority-color);\n  padding: 4px 12px;\n  background-color: ${({ priority }) => {\n    switch (priority) {\n      case 'low':\n        return 'var(--task-priority-low-bg)';\n      case 'medium':\n        return 'var(--task-priority-medium-bg)';\n      case 'high':\n        return 'var(--task-priority-high-bg)';\n\n      default:\n        return;\n    }\n  }};\n  border: none;\n\n  border-radius: 4px;\n  ${min(tablet)} {\n  }\n  ${min(desktop)} {\n  }\n`;\n\nexport const ContainerIcons = styled.div`\n  position: relative;\n  z-index: 1;\n  display: flex;\n  gap: 10px;\n  margin-left: auto;\n`;\n\nexport const IconTask = styled.svg`\n  height: 14px;\n  width: 14px;\n  stroke: var(--primary-text-color);\n  cursor: pointer;\n  & use {\n    fill: transparent;\n  }\n  ${min(tablet)} {\n    height: 16px;\n    width: 16px;\n  }\n  ${min(desktop)} {\n  }\n`;\n","import styled from '@emotion/styled';\n\nexport const ContainerReplaceTask = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 14px;\n  background-color: var(--task-popup-bg);\n  padding: 14px;\n  border-radius: 8px;\n  position: absolute;\n  margin-top: 12px;\n  top: 100%;\n  right: -26%;\n  box-shadow: 0px 4px 16px 0px #1111111a;\n`;\n\nexport const ReplaceTaskContainerText = styled.div`\n  display: flex;\n  justify-content: space-between;\n  gap: 8px;\n  white-space: nowrap;\n\n  cursor: pointer;\n`;\n\nexport const ReplaceTaskText = styled.span`\n  font-size: 12px;\n  font-weight: 500;\n  line-height: 14px;\n  color: var(--task-popup-color-text);\n`;\n","import React from 'react';\n\nimport sprite from '../../../../assets/images/icons/icons.svg';\nimport {\n  ContainerReplaceTask,\n  ReplaceTaskContainerText,\n  ReplaceTaskText,\n} from './PopUpReplace.styled';\nimport { useDispatch } from 'react-redux';\nimport { updateTaskOperation } from 'redux/tasks/operations';\nimport { IconTask } from '../Tasks/Tasks.styled';\n\nconst PopUpReplace = ({\n  type,\n  tasks,\n  setTasks,\n  setIsShowPopUpReplace,\n  _id,\n}) => {\n  const dispatch = useDispatch();\n\n  const viewCategories = type => {\n    let arrCategories = [];\n    switch (type) {\n      case 'to-do':\n        arrCategories = [\n          {\n            id: 1,\n            typeCategory: 'In progress',\n            typeForOnClick: 'in-progress',\n          },\n          { id: 2, typeCategory: 'Done', typeForOnClick: 'done' },\n        ];\n        break;\n\n      case 'in-progress':\n        arrCategories = [\n          { id: 1, typeCategory: 'To Do', typeForOnClick: 'to-do' },\n          { id: 2, typeCategory: 'Done', typeForOnClick: 'done' },\n        ];\n        break;\n      case 'done':\n        arrCategories = [\n          { id: 1, typeCategory: 'To Do', typeForOnClick: 'to-do' },\n          {\n            id: 2,\n            typeCategory: 'In progress',\n            typeForOnClick: 'in-progress',\n          },\n        ];\n        break;\n\n      default:\n        break;\n    }\n    return arrCategories;\n  };\n\n  const onReplace = async (id, typeCategory) => {\n    await dispatch(\n      updateTaskOperation({\n        taskId: id,\n        updateTaskData: { category: typeCategory },\n      })\n    );\n\n    const filteredTasks = tasks\n      ? tasks.map(task => {\n          if (task._id === id) {\n            return { ...task, category: typeCategory };\n          }\n          return task;\n        })\n      : [];\n\n    setTasks(filteredTasks);\n\n    setIsShowPopUpReplace(false);\n  };\n  return (\n    <ContainerReplaceTask>\n      {viewCategories(type).map(({ id, typeCategory, typeForOnClick }) => (\n        <ReplaceTaskContainerText\n          key={id}\n          onClick={() => onReplace(_id, typeForOnClick)}\n        >\n          <ReplaceTaskText>{typeCategory}</ReplaceTaskText>\n          <IconTask>\n            <use xlinkHref={sprite + '#icon-arrow-circle-broken-right'} />\n          </IconTask>\n        </ReplaceTaskContainerText>\n      ))}\n    </ContainerReplaceTask>\n  );\n};\n\nexport default PopUpReplace;\n","import React, { useEffect, useState } from 'react';\nimport {\n  ContainerButtonsTask,\n  ContainerIcons,\n  ContainerListTasks,\n  IconTask,\n  ListTasks,\n  Task,\n  TaskButtonPriority,\n  TaskImage,\n  TaskTitle,\n} from './Tasks.styled';\nimport PopUpReplace from '../PopUpReplace/PopUpReplace';\nimport { useDispatch } from 'react-redux';\nimport {\n  deleteTaskOperation,\n  fetchTasksOperation,\n} from 'redux/tasks/operations';\nimport { useParams } from 'react-router-dom';\nimport sprite from '../../../../assets/images/icons/icons.svg';\n\nconst Tasks = ({ type }) => {\n  const dispatch = useDispatch();\n  const [isShowPopUpReplace, setIsShowPopUpReplace] = useState(false);\n\n  const [tasks, setTasks] = useState([]);\n\n  const { currentDay } = useParams();\n\n  useEffect(() => {\n    (async () => {\n      const { payload } = await dispatch(fetchTasksOperation());\n      const filteredTasks = payload\n        ? payload.filter(({ date }) => date === currentDay)\n        : [];\n      setTasks(filteredTasks);\n    })();\n  }, [tasks, currentDay, dispatch]);\n\n  const toggleShowPopUpReplace = id => {\n    isShowPopUpReplace === id\n      ? setIsShowPopUpReplace(false)\n      : setIsShowPopUpReplace(id);\n  };\n  const onEdit = () => {\n    console.log('onEdit');\n  };\n  const onDelete = taskId => {\n    dispatch(deleteTaskOperation(taskId));\n    const filteredTasks = tasks\n      ? tasks.filter(({ _id }) => _id !== taskId)\n      : [];\n    setTasks(filteredTasks);\n  };\n  return (\n    <ContainerListTasks>\n      <ListTasks>\n        {tasks.map(\n          ({ _id, title, start, end, priority, date, category, owner }) => {\n            if (type !== category) {\n              return '';\n            }\n            return (\n              <Task key={_id}>\n                <TaskTitle>{title}</TaskTitle>\n                <ContainerButtonsTask>\n                  <TaskImage\n                    src=\"https://www.w3schools.com/howto/img_avatar.png\"\n                    alt=\"#\"\n                  />\n                  <TaskButtonPriority priority={priority}>\n                    {priority.charAt(0).toUpperCase() + priority.slice(1)}\n                  </TaskButtonPriority>\n                  <ContainerIcons>\n                    <IconTask onClick={() => toggleShowPopUpReplace(_id)}>\n                      <use\n                        xlinkHref={sprite + '#icon-arrow-circle-broken-right'}\n                      />\n                    </IconTask>\n                    <IconTask onClick={onEdit}>\n                      <use xlinkHref={sprite + '#icon-pencil'} />\n                    </IconTask>\n                    <IconTask onClick={() => onDelete(_id)}>\n                      <use xlinkHref={sprite + '#icon-trash'} />\n                    </IconTask>\n                    {isShowPopUpReplace === _id && (\n                      <PopUpReplace\n                        type={type}\n                        tasks={tasks}\n                        setTasks={setTasks}\n                        setIsShowPopUpReplace={setIsShowPopUpReplace}\n                        _id={_id}\n                      ></PopUpReplace>\n                    )}\n                  </ContainerIcons>\n                </ContainerButtonsTask>\n              </Task>\n            );\n          }\n        )}\n      </ListTasks>\n    </ContainerListTasks>\n  );\n};\n\nexport default Tasks;\n","import {\n  ButtonAddTask,\n  ButtonAddTaskText,\n  ContainerButtonAddTask,\n  ContainerMain,\n  ContainerSecond,\n  IconButtonAddTask,\n} from './ChoosedDay.styled';\n\nimport sprite from '../../../assets/images/icons/icons.svg';\nimport Title from './Title/Title';\nimport Tasks from './Tasks/Tasks';\n\nconst categories = [\n  { id: 1, type: 'to-do' },\n  { id: 2, type: 'in-progress' },\n  { id: 3, type: 'done' },\n];\n\nconst ChoosedDay = () => {\n  // useEffect(() => {\n  //   const onClickBody = ({ target }) => {\n  //     console.dir(target);\n  //     if (target.tagName !== 'use') {\n  //       setIsShowPopUpReplace(false);\n  //       return;\n  //     }\n  //   };\n  //   const body = document.querySelector('body');\n\n  //   if (isShowPopUpReplace) {\n  //     body.addEventListener('click', onClickBody);\n  //   } else {\n  //     body.removeEventListener('click', onClickBody);\n  //   }\n  // }, [isShowPopUpReplace]);\n\n  const onAdd = category => {\n    console.log('onAdd', category);\n  };\n\n  return (\n    <ContainerMain>\n      {categories.map(({ id, type }) => (\n        <ContainerSecond key={id}>\n          <Title type={type} onAdd={onAdd} />\n          <Tasks type={type} />\n          <ContainerButtonAddTask>\n            <ButtonAddTask onClick={onAdd}>\n              <IconButtonAddTask>\n                <use xlinkHref={sprite + '#icon-plus'} />\n              </IconButtonAddTask>\n              <ButtonAddTaskText>Add task</ButtonAddTaskText>\n            </ButtonAddTask>\n          </ContainerButtonAddTask>\n        </ContainerSecond>\n      ))}\n    </ContainerMain>\n  );\n};\n\nexport default ChoosedDay;\n"],"names":["ContainerMain","styled","min","tablet","desktop","ContainerSecond","ContainerButtonAddTask","ButtonAddTask","IconButtonAddTask","ButtonAddTaskText","ContainerTitle","MainTitle","IconAddTask","type","onAdd","onClick","xlinkHref","sprite","ContainerListTasks","ListTasks","Task","TaskTitle","ContainerButtonsTask","TaskImage","TaskButtonPriority","priority","ContainerIcons","IconTask","ContainerReplaceTask","ReplaceTaskContainerText","ReplaceTaskText","tasks","setTasks","setIsShowPopUpReplace","_id","dispatch","useDispatch","onReplace","id","typeCategory","updateTaskOperation","taskId","updateTaskData","category","filteredTasks","map","task","arrCategories","typeForOnClick","viewCategories","useState","isShowPopUpReplace","currentDay","useParams","useEffect","fetchTasksOperation","payload","filter","date","onEdit","console","log","title","start","end","owner","src","alt","charAt","toUpperCase","slice","deleteTaskOperation","onDelete","categories"],"sourceRoot":""}