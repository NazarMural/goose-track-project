{"version":3,"file":"static/js/553.b4f7051c.chunk.js","mappings":"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","sources":["components/MainContainer/MainContainer.styled.jsx","components/MainContainer/MainContainer.jsx","helpers/calculationTask.js","components/Statistics/StatisticsChart/StatisticsÐ¡hart.styled.jsx","components/Statistics/StatisticsChart/StatisticsChart.jsx","pages/StatisticsPage.jsx","redux/theme/selectors.js"],"sourcesContent":["import styled from '@emotion/styled';\nimport { desktop, min, tablet } from 'styles/media';\n\nexport const Main = styled.main`\n  background-color: var(--page-bg-color);\n  padding-top: 64px;\n  padding-bottom: 40px;\n  min-height: 100vh;\n\n  ${min(tablet)} {\n    padding-bottom: 38px;\n  }\n\n  ${min(desktop)} {\n    padding-top: 38px;\n    padding-bottom: 32px;\n  }\n`;\n\nexport const Container = styled.div`\n  padding: 0 20px;\n\n  ${min(tablet)} {\n    padding: 0 32px;\n  }\n`;\n","import { Container, Main } from './MainContainer.styled';\n\nexport const MainContainer = ({ children }) => {\n  return (\n    <Main>\n      <Container>{children}</Container>\n    </Main>\n  );\n};\n","const filteredTasksByCategory = (tasks, category) =>\n  tasks\n    ? tasks.filter(({ category: taskCategory }) => taskCategory === category)\n        .length\n    : 0;\n\nconst percentageOfTasks = numbers => {\n  const sum = numbers.reduce((acc, num) => acc + num, 0);\n  return numbers.map(num =>\n    sum === 0 ? '0%' : `${((num / sum) * 100).toFixed(0)}%`\n  );\n};\n\nconst getCategoryName = category => {\n  const categoryNames = {\n    'to-do': 'To Do',\n    'in-progress': 'In Progress',\n    done: 'Done',\n  };\n  return categoryNames[category] || category;\n};\n\nconst calculationTasksByCategory = (currentDate, tasks) => {\n  const filteredTasksDay = tasks\n    ? tasks.filter(({ date }) => date === currentDate)\n    : [];\n\n  const categories = ['to-do', 'in-progress', 'done'];\n  const numberOfTasksDayByCategory = categories.map(category =>\n    filteredTasksByCategory(filteredTasksDay, category)\n  );\n  const numberOfTasksMonthByCategory = categories.map(category =>\n    filteredTasksByCategory(tasks, category)\n  );\n\n  const percentageTasksDay = percentageOfTasks(numberOfTasksDayByCategory);\n  const percentageTasksMonth = percentageOfTasks(numberOfTasksMonthByCategory);\n\n  return categories.map((category, index) => ({\n    name: getCategoryName(category),\n    day: numberOfTasksDayByCategory[index],\n    month: numberOfTasksMonthByCategory[index],\n    percentageDay: percentageTasksDay[index],\n    percentageMonth: percentageTasksMonth[index],\n  }));\n};\n\nexport default calculationTasksByCategory;\n","import styled from '@emotion/styled';\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport { desktop, min, max, tablet, mobile } from 'styles/media';\n\nexport const DatePickerStyle = styled(DatePicker)`\n  font-family: Inter;\n  font-size: 14px;\n  font-weight: 700;\n  line-height: 1.28;\n  text-transform: uppercase;\n  text-align: center;\n\n  padding: 6px 12px;\n  max-width: 172px;\n\n  background-color: var(--datepicker-bg-color);\n  color: var(--datepicker-text-color);\n\n  border: 0;\n  border-radius: 8px;\n\n  ${min(tablet)} {\n    font-size: 16px;\n  }\n`;\n\nexport const CalendarBox = styled.div`\n  display: flex;\n  justify-content: space-between;\n\n  margin-bottom: 26px;\n\n  ${min(tablet)} {\n    margin-bottom: 0;\n  }\n\n  .react-datepicker__input-container input {\n    outline: none;\n    cursor: pointer;\n\n    margin-right: 8px;\n  }\n\n  .react-datepicker__input-container input:hover,\n  .react-datepicker__input-container input:focus {\n    background-color: var(--btn-bg-hover);\n  }\n\n  .react-datepicker__triangle {\n    display: none;\n  }\n\n  .react-datepicker {\n    background-color: #3e85f3;\n\n    border-bottom: 0;\n  }\n\n  .react-datepicker__header {\n    background-color: #3e85f3;\n    width: 235px;\n\n    border-bottom: 0;\n\n    padding: 18px 0 9px 0;\n  }\n\n  .react-datepicker__navigation {\n    top: 10px;\n  }\n\n  .react-datepicker__navigation-icon::before {\n    border-color: var(--datepicker-arrow-color);\n    border-width: 2px 2px 0 0;\n    width: 4px;\n    height: 4px;\n    top: 10px;\n  }\n\n  .react-datepicker__navigation--previous {\n    left: 0;\n  }\n\n  .react-datepicker__navigation-icon--next {\n    left: 0;\n  }\n\n  .react-datepicker__day-names {\n    display: flex;\n    justify-content: space-between;\n    font-family: Inter;\n    font-size: 14px;\n    font-weight: 500;\n    letter-spacing: -0.28px;\n\n    border-bottom: 1px solid var(--datepicker-day-names-border);\n\n    padding: 0 20px;\n\n    .react-datepicker__day-name {\n      color: var(--datepicker-day-names-text-color);\n    }\n  }\n\n  .react-datepicker__current-month {\n    color: var(--datepicker-current-month-text-color);\n    font-family: Inter;\n    font-size: 16px;\n    font-weight: 600;\n    letter-spacing: -0.32px;\n\n    margin-bottom: 16px;\n  }\n\n  .react-datepicker__month {\n    display: flex;\n    flex-direction: column;\n    gap: 20px;\n\n    padding: 15px 20px 18px 20px;\n  }\n\n  .react-datepicker .react-datepicker__week {\n    display: flex;\n    justify-content: space-between;\n\n    border-bottom: 0;\n  }\n\n  .react-datepicker .react-datepicker__day {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n\n    color: var(--datepicker-day-text-color);\n    font-family: Inter;\n    font-size: 14px;\n    font-weight: 400;\n    line-height: 1.28;\n    letter-spacing: -0.28px;\n\n    border-right: 0;\n    width: 22px;\n    height: 22px;\n  }\n\n  .react-datepicker .react-datepicker__day:hover {\n    background-color: var(--datepicker-day-accent-bg-color) !important;\n    color: var(--datepicker-day-accent-text-color);\n\n    border-radius: 50% !important;\n  }\n\n  .react-datepicker .react-datepicker__day--selected {\n    background-color: var(--datepicker-day-accent-bg-color) !important;\n    color: var(--datepicker-day-accent-text-color);\n\n    border-radius: 50% !important;\n  }\n\n  .react-datepicker__day--outside-month {\n    color: transparent !important;\n  }\n`;\n\nexport const ButtonBox = styled.div`\n  display: flex;\n`;\n\nexport const Button = styled.button`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  padding: 0;\n\n  background-color: transparent;\n  height: 30px;\n  width: 35px;\n\n  fill: var(--statistic-button-arrow-color);\n\n  cursor: pointer;\n\n  ${min(tablet)} {\n    height: 32px;\n  }\n\n  &:hover svg {\n    fill: var(--accent-color);\n  }\n  & svg {\n    transition: fill 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  }\n`;\n\nexport const ButtonLeft = styled(Button)`\n  border-radius: 8px 0 0 8px;\n  border: 1px solid var(--statistic-button-border-color);\n`;\n\nexport const ButtonRight = styled(Button)`\n  border-radius: 0 8px 8px 0;\n  border: 1px solid var(--statistic-button-border-color);\n  border-left: none;\n`;\n\nexport const ChartContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 40px 14px;\n  border: 0.8px solid var(--border-chart);\n  border-radius: 20px;\n\n  height: 413px;\n\n  ${max(mobile)} {\n    max-width: 307px;\n  }\n\n  ${min(tablet)} {\n    padding: 32px;\n    border-radius: 29px;\n\n    width: 640px;\n    height: 424px;\n  }\n  ${min(desktop)} {\n    padding: 40px;\n\n    width: 860px;\n    height: 440px;\n  }\n`;\n\nexport const StatisticsContainer = styled.div`\n  padding: 28px 14px;\n  max-width: 335px;\n  background-color: var(--primary-bg-color);\n  border-radius: 16px;\n  height: auto;\n\n  ${min(tablet)} {\n    min-width: 704px;\n    padding: 132px 32px;\n  }\n\n  ${min(desktop)} {\n    min-width: 1087px;\n    padding: 134px 113px;\n  }\n`;\n\nexport const NavContainer = styled.div`\n  ${min(tablet)} {\n    display: flex;\n    justify-content: space-between;\n    padding: 0 32px 0 23px;\n    margin-bottom: 40px;\n  }\n\n  ${min(desktop)} {\n    padding: 0 40px 0 40px;\n  }\n`;\n\nexport const LegendContainer = styled.div`\n  display: flex;\n  gap: 14px;\n  margin-bottom: 40px;\n\n  ${min(tablet)} {\n    margin-bottom: 0;\n  }\n`;\n\nexport const Legend = styled.p`\n  display: flex;\n  align-items: center;\n\n  margin: 0;\n\n  color: var(--legend-text-color);\n  font-size: 14px;\n  line-height: 1.12;\n\n  ${min(tablet)} {\n    font-size: 16px;\n  }\n\n  ::before {\n    content: '';\n    display: inline-block;\n    width: 8px; /* ÐÑÐ°Ð¼ÐµÑÑ ÐºÑÑÐ¶ÐµÑÐºÐ° */\n    height: 8px; /* ÐÑÐ°Ð¼ÐµÑÑ ÐºÑÑÐ¶ÐµÑÐºÐ° */\n    border-radius: 50%; /* Ð Ð¾Ð±Ð¸Ð¼Ð¾ ÐºÑÑÐ¶ÐµÑÐ¾Ðº */\n    margin-right: 5px; /* ÐÑÐ´ÑÑÐ°Ð½Ñ Ð¼ÑÐ¶ ÐºÑÑÐ¶ÐµÑÐºÐ¾Ð¼ Ñ ÑÐµÐºÑÑÐ¾Ð¼ */\n  }\n`;\n\nexport const DayLegend = styled(Legend)`\n  ::before {\n    background-color: var(--legend-day); /* Ð§ÐµÑÐ²Ð¾Ð½Ð¸Ð¹ ÐºÑÑÐ¶ÐµÑÐ¾Ðº */\n  }\n`;\n\nexport const MonthLegend = styled(Legend)`\n  ::before {\n    background-color: var(--legend-month); /* ÐÐµÐ»ÐµÐ½Ð¸Ð¹ ÐºÑÑÐ¶ÐµÑÐ¾Ðº */\n  }\n`;\n\nexport const ChartTasks = styled.p`\n  margin: 0;\n  margin-bottom: 14px;\n\n  color: var(--statistic-tasks-text-color);\n  font-size: 14px;\n  font-weight: 600;\n  line-height: 1.5;\n`;\n","import sprite from '../../../assets/images/icons/icons.svg';\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  LabelList,\n  ResponsiveContainer,\n} from 'recharts';\nimport moment from 'moment';\nimport { useMediaQuery } from 'react-responsive';\nimport { fetchTasksOperation } from 'redux/tasks/operations';\nimport calculationTasksCurrentDay from 'helpers/calculationTask';\n\nimport {\n  CalendarBox,\n  ButtonBox,\n  DatePickerStyle,\n  StatisticsContainer,\n  LegendContainer,\n  DayLegend,\n  MonthLegend,\n  ChartTasks,\n  ChartContainer,\n  ButtonLeft,\n  ButtonRight,\n  NavContainer,\n} from './StatisticsÐ¡hart.styled';\nimport { selectTheme } from 'redux/theme/selectors';\n\nconst StatisticsÐ¡hart = () => {\n  const dispatch = useDispatch();\n  const currentTheme = useSelector(selectTheme);\n  const [currentDate, setCurrentDate] = useState(new Date());\n  const [sortTasks, setSortTasks] = useState({});\n\n  const isMobile = useMediaQuery({ query: 'max-width: 768px' });\n\n  const strokeColor =\n    currentTheme === 'dark' ? 'rgba(227, 243, 255, 0.15)' : '#e3f3ff';\n  const fillYXAxis = currentTheme === 'dark' ? '#ffffff' : '#343434';\n  const fillLabelList = currentTheme === 'dark' ? '#ffffff' : '#343434';\n\n  useEffect(() => {\n    (async () => {\n      const month = moment(currentDate).format('YYYY-MM');\n      const day = moment(currentDate).format('YYYY-MM-DD');\n\n      const { payload } = await dispatch(fetchTasksOperation(month));\n      const temp = calculationTasksCurrentDay(day, payload);\n\n      setSortTasks(temp);\n    })();\n  }, [dispatch, currentDate]);\n\n  const goToNextDay = () => {\n    const newDate = moment(currentDate).add(1, 'day').toDate();\n    setCurrentDate(newDate);\n  };\n\n  const goToPreviousDay = () => {\n    const newDate = moment(currentDate).subtract(1, 'day').toDate();\n    setCurrentDate(newDate);\n  };\n\n  const LabelListContent = ({ x, y, width, value }) => (\n    <g transform={`translate(${x + width / 2},${y + 4})`}>\n      <text\n        x={2}\n        y={3}\n        dy={0}\n        textAnchor=\"middle\"\n        fill={fillLabelList}\n        fontSize={isMobile ? 12 : 16}\n        fontWeight={400}\n      >\n        {value}\n      </text>\n    </g>\n  );\n\n  const data = sortTasks;\n\n  return (\n    <StatisticsContainer>\n      <NavContainer>\n        <CalendarBox>\n          <DatePickerStyle\n            selected={currentDate}\n            onChange={date => setCurrentDate(date)}\n            dateFormat=\"dd MMMM yyyy\"\n          />\n          <ButtonBox>\n            <ButtonLeft onClick={goToPreviousDay}>\n              <svg height={16} width={16}>\n                <use xlinkHref={`${sprite}#icon-chevron-left`} />\n              </svg>\n            </ButtonLeft>\n            <ButtonRight onClick={goToNextDay}>\n              <svg height={16} width={16}>\n                <use xlinkHref={`${sprite}#icon-chevron-right`} />\n              </svg>\n            </ButtonRight>\n          </ButtonBox>\n        </CalendarBox>\n        <LegendContainer>\n          <DayLegend>By Day</DayLegend>\n          <MonthLegend>By Month</MonthLegend>\n        </LegendContainer>\n      </NavContainer>\n      <ChartContainer>\n        <ChartTasks>Tasks</ChartTasks>\n        <ResponsiveContainer width=\"100%\" height=\"100%\">\n          <BarChart\n            data={data}\n            barGap={isMobile ? 8 : 14}\n            barSize={isMobile ? 22 : 27}\n          >\n            <CartesianGrid\n              stroke={strokeColor}\n              strokeWidth={1}\n              strokeDasharray=\"none\"\n              vertical={false}\n            />\n            <XAxis\n              dataKey=\"name\"\n              tick={{ fontSize: isMobile ? 12 : 16, fill: fillYXAxis }}\n              tickLine={false}\n              tickMargin={10}\n              axisLine={false}\n            />\n            <YAxis\n              tickFormatter={value => value}\n              domain={[0, 'dataMax']}\n              allowDataOverflow={true}\n              scale=\"linear\"\n              axisLine={false}\n              tickLine={false}\n              tickMargin={30}\n              tick={{ fill: fillYXAxis }}\n            />\n            <Bar\n              dataKey=\"day\"\n              fill=\"url(#gradient-day)\"\n              radius={[0, 0, 10, 10]}\n            >\n              <LabelList\n                dataKey=\"percentageDay\"\n                content={<LabelListContent />}\n                position=\"top\"\n              />\n            </Bar>\n            <Bar\n              dataKey=\"month\"\n              fill=\"url(#gradient-month)\"\n              radius={[0, 0, 10, 10]}\n            >\n              <LabelList\n                dataKey=\"percentageMonth\"\n                content={<LabelListContent />}\n                position=\"top\"\n              />\n            </Bar>\n            <defs>\n              <linearGradient id={'gradient-day'} x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                <stop offset=\"0%\" stopColor={'#FFD2DD'} stopOpacity={0} />\n                <stop offset=\"100%\" stopColor={'#FFD2DD'} stopOpacity={1} />\n              </linearGradient>\n              <linearGradient id={'gradient-month'} x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                <stop offset=\"0%\" stopColor={'#3E85F3'} stopOpacity={0} />\n                <stop offset=\"100%\" stopColor={'#3E85F3'} stopOpacity={1} />\n              </linearGradient>\n            </defs>\n          </BarChart>\n        </ResponsiveContainer>\n      </ChartContainer>\n    </StatisticsContainer>\n  );\n};\n\nexport default StatisticsÐ¡hart;\n","import React from 'react';\nimport StatisticsÐ¡hart from 'components/Statistics/StatisticsChart/StatisticsChart';\nimport { MainContainer } from 'components/MainContainer/MainContainer';\n\nconst StatisticsPage = () => {\n  return (\n    <MainContainer>\n      <StatisticsÐ¡hart />\n    </MainContainer>\n  );\n};\n\nexport default StatisticsPage;\n","const selectTheme = state => state.theme.theme;\n\nexport { selectTheme };\n"],"names":["Main","styled","min","tablet","desktop","Container","MainContainer","children","filteredTasksByCategory","tasks","category","filter","length","percentageOfTasks","numbers","sum","reduce","acc","num","map","toFixed","getCategoryName","done","currentDate","filteredTasksDay","date","categories","numberOfTasksDayByCategory","numberOfTasksMonthByCategory","percentageTasksDay","percentageTasksMonth","index","name","day","month","percentageDay","percentageMonth","DatePickerStyle","DatePicker","CalendarBox","ButtonBox","Button","ButtonLeft","ButtonRight","ChartContainer","max","mobile","StatisticsContainer","NavContainer","LegendContainer","Legend","DayLegend","MonthLegend","ChartTasks","dispatch","useDispatch","currentTheme","useSelector","selectTheme","useState","Date","setCurrentDate","sortTasks","setSortTasks","isMobile","useMediaQuery","query","strokeColor","fillYXAxis","fillLabelList","useEffect","moment","format","fetchTasksOperation","payload","temp","calculationTasksCurrentDay","LabelListContent","x","y","width","value","transform","dy","textAnchor","fill","fontSize","fontWeight","data","selected","onChange","dateFormat","onClick","newDate","subtract","toDate","height","xlinkHref","sprite","add","ResponsiveContainer","BarChart","barGap","barSize","CartesianGrid","stroke","strokeWidth","strokeDasharray","vertical","XAxis","dataKey","tick","tickLine","tickMargin","axisLine","YAxis","tickFormatter","domain","allowDataOverflow","scale","Bar","radius","LabelList","content","position","id","x1","y1","x2","y2","offset","stopColor","stopOpacity","state","theme"],"sourceRoot":""}